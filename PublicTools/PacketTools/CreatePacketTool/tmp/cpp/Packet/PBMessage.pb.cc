// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PBMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PBMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CG_PING_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CG_PING_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_RET_PING_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_RET_PING_reflection_ = NULL;
const ::google::protobuf::Descriptor* CG_LOGIN_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CG_LOGIN_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CG_LOGIN_VALIDATETYPE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GC_LOGIN_RET_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_LOGIN_RET_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GC_LOGIN_RET_LOGINRESULT_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GC_LOGIN_RET_VALIDATERESULT_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GC_LOGIN_QUEUE_STATUS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_LOGIN_QUEUE_STATUS_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GC_LOGIN_QUEUE_STATUS_QUEUESTATUS_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CG_CREATEROLE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CG_CREATEROLE_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_CREATEROLE_RET_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_CREATEROLE_RET_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GC_CREATEROLE_RET_CREATEROLE_RESULT_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CG_SELECTROLE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CG_SELECTROLE_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_SELECTROLE_RET_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_SELECTROLE_RET_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GC_SELECTROLE_RET_SELECTROLE_RESULT_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CG_REQ_RANDOMNAME_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CG_REQ_RANDOMNAME_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_RET_RANDOMNAME_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_RET_RANDOMNAME_reflection_ = NULL;
const ::google::protobuf::Descriptor* CG_REQ_CHANGE_SCENE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CG_REQ_CHANGE_SCENE_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CG_REQ_CHANGE_SCENE_CHANGETYPE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GC_ENTER_SCENE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_ENTER_SCENE_reflection_ = NULL;
const ::google::protobuf::Descriptor* CG_ENTER_SCENE_OK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CG_ENTER_SCENE_OK_reflection_ = NULL;
const ::google::protobuf::Descriptor* CG_CONNECTED_HEARTBEAT_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CG_CONNECTED_HEARTBEAT_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_CONNECTED_HEARTBEAT_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_CONNECTED_HEARTBEAT_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_NOTICE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_NOTICE_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_MISSION_SYNC_MISSIONLIST_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_MISSION_SYNC_MISSIONLIST_reflection_ = NULL;
const ::google::protobuf::Descriptor* CG_ACCEPTMISSION_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CG_ACCEPTMISSION_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_ACCEPTMISSION_RET_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_ACCEPTMISSION_RET_reflection_ = NULL;
const ::google::protobuf::Descriptor* CG_COMPLETEMISSION_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CG_COMPLETEMISSION_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_COMPLETEMISSION_RET_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_COMPLETEMISSION_RET_reflection_ = NULL;
const ::google::protobuf::Descriptor* CG_ABANDONMISSION_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CG_ABANDONMISSION_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_ABANDONMISSION_RET_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_ABANDONMISSION_RET_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_MISSION_STATE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_MISSION_STATE_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_MISSION_PARAM_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_MISSION_PARAM_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_CREATE_PLAYER_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_CREATE_PLAYER_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_DELETE_OBJ_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_DELETE_OBJ_reflection_ = NULL;
const ::google::protobuf::Descriptor* CG_SYNC_POS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CG_SYNC_POS_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_SYNC_POS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_SYNC_POS_reflection_ = NULL;
const ::google::protobuf::Descriptor* CG_MOVE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CG_MOVE_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_MOVE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_MOVE_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_STOP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_STOP_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_BROADCAST_ATTR_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_BROADCAST_ATTR_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_SYN_ATTR_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_SYN_ATTR_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_SYNC_COMMONDATA_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_SYNC_COMMONDATA_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_SYNC_COMMONFLAG_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_SYNC_COMMONFLAG_reflection_ = NULL;
const ::google::protobuf::Descriptor* CG_ASK_SETCOMMONFLAG_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CG_ASK_SETCOMMONFLAG_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_ASK_COMMONFLAG_RET_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_ASK_COMMONFLAG_RET_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_PBMessage_2eproto() {
  protobuf_AddDesc_PBMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "PBMessage.proto");
  GOOGLE_CHECK(file != NULL);
  CG_PING_descriptor_ = file->message_type(0);
  static const int CG_PING_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_PING, noparam_),
  };
  CG_PING_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CG_PING_descriptor_,
      CG_PING::default_instance_,
      CG_PING_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_PING, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_PING, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CG_PING));
  GC_RET_PING_descriptor_ = file->message_type(1);
  static const int GC_RET_PING_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_RET_PING, noparam_),
  };
  GC_RET_PING_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_RET_PING_descriptor_,
      GC_RET_PING::default_instance_,
      GC_RET_PING_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_RET_PING, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_RET_PING, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_RET_PING));
  CG_LOGIN_descriptor_ = file->message_type(2);
  static const int CG_LOGIN_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_LOGIN, vtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_LOGIN, gameversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_LOGIN, programversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_LOGIN, publicresourceversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_LOGIN, maxpacketid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_LOGIN, forceenter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_LOGIN, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_LOGIN, devicetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_LOGIN, deviceversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_LOGIN, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_LOGIN, validateinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_LOGIN, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_LOGIN, mediachannel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_LOGIN, rapidvalidatecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_LOGIN, reservedint1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_LOGIN, reservedint2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_LOGIN, reservedint3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_LOGIN, reservedint4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_LOGIN, reservedstring1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_LOGIN, reservedstring2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_LOGIN, reservedstring3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_LOGIN, reservedstring4_),
  };
  CG_LOGIN_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CG_LOGIN_descriptor_,
      CG_LOGIN::default_instance_,
      CG_LOGIN_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_LOGIN, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_LOGIN, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CG_LOGIN));
  CG_LOGIN_VALIDATETYPE_descriptor_ = CG_LOGIN_descriptor_->enum_type(0);
  GC_LOGIN_RET_descriptor_ = file->message_type(3);
  static const int GC_LOGIN_RET_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_LOGIN_RET, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_LOGIN_RET, validateresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_LOGIN_RET, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_LOGIN_RET, oid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_LOGIN_RET, accesstoken_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_LOGIN_RET, rapidvalidatecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_LOGIN_RET, roleguidlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_LOGIN_RET, roletypelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_LOGIN_RET, playernamelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_LOGIN_RET, rolelevellist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_LOGIN_RET, modelvisualid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_LOGIN_RET, weaponid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_LOGIN_RET, weaponeffectgem_),
  };
  GC_LOGIN_RET_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_LOGIN_RET_descriptor_,
      GC_LOGIN_RET::default_instance_,
      GC_LOGIN_RET_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_LOGIN_RET, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_LOGIN_RET, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_LOGIN_RET));
  GC_LOGIN_RET_LOGINRESULT_descriptor_ = GC_LOGIN_RET_descriptor_->enum_type(0);
  GC_LOGIN_RET_VALIDATERESULT_descriptor_ = GC_LOGIN_RET_descriptor_->enum_type(1);
  GC_LOGIN_QUEUE_STATUS_descriptor_ = file->message_type(4);
  static const int GC_LOGIN_QUEUE_STATUS_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_LOGIN_QUEUE_STATUS, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_LOGIN_QUEUE_STATUS, index_),
  };
  GC_LOGIN_QUEUE_STATUS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_LOGIN_QUEUE_STATUS_descriptor_,
      GC_LOGIN_QUEUE_STATUS::default_instance_,
      GC_LOGIN_QUEUE_STATUS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_LOGIN_QUEUE_STATUS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_LOGIN_QUEUE_STATUS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_LOGIN_QUEUE_STATUS));
  GC_LOGIN_QUEUE_STATUS_QUEUESTATUS_descriptor_ = GC_LOGIN_QUEUE_STATUS_descriptor_->enum_type(0);
  CG_CREATEROLE_descriptor_ = file->message_type(5);
  static const int CG_CREATEROLE_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_CREATEROLE, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_CREATEROLE, name_),
  };
  CG_CREATEROLE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CG_CREATEROLE_descriptor_,
      CG_CREATEROLE::default_instance_,
      CG_CREATEROLE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_CREATEROLE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_CREATEROLE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CG_CREATEROLE));
  GC_CREATEROLE_RET_descriptor_ = file->message_type(6);
  static const int GC_CREATEROLE_RET_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CREATEROLE_RET, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CREATEROLE_RET, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CREATEROLE_RET, playerguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CREATEROLE_RET, playername_),
  };
  GC_CREATEROLE_RET_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_CREATEROLE_RET_descriptor_,
      GC_CREATEROLE_RET::default_instance_,
      GC_CREATEROLE_RET_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CREATEROLE_RET, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CREATEROLE_RET, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_CREATEROLE_RET));
  GC_CREATEROLE_RET_CREATEROLE_RESULT_descriptor_ = GC_CREATEROLE_RET_descriptor_->enum_type(0);
  CG_SELECTROLE_descriptor_ = file->message_type(7);
  static const int CG_SELECTROLE_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_SELECTROLE, roleguid_),
  };
  CG_SELECTROLE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CG_SELECTROLE_descriptor_,
      CG_SELECTROLE::default_instance_,
      CG_SELECTROLE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_SELECTROLE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_SELECTROLE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CG_SELECTROLE));
  GC_SELECTROLE_RET_descriptor_ = file->message_type(8);
  static const int GC_SELECTROLE_RET_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_SELECTROLE_RET, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_SELECTROLE_RET, playerguid_),
  };
  GC_SELECTROLE_RET_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_SELECTROLE_RET_descriptor_,
      GC_SELECTROLE_RET::default_instance_,
      GC_SELECTROLE_RET_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_SELECTROLE_RET, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_SELECTROLE_RET, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_SELECTROLE_RET));
  GC_SELECTROLE_RET_SELECTROLE_RESULT_descriptor_ = GC_SELECTROLE_RET_descriptor_->enum_type(0);
  CG_REQ_RANDOMNAME_descriptor_ = file->message_type(9);
  static const int CG_REQ_RANDOMNAME_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_REQ_RANDOMNAME, none_),
  };
  CG_REQ_RANDOMNAME_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CG_REQ_RANDOMNAME_descriptor_,
      CG_REQ_RANDOMNAME::default_instance_,
      CG_REQ_RANDOMNAME_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_REQ_RANDOMNAME, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_REQ_RANDOMNAME, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CG_REQ_RANDOMNAME));
  GC_RET_RANDOMNAME_descriptor_ = file->message_type(10);
  static const int GC_RET_RANDOMNAME_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_RET_RANDOMNAME, names_),
  };
  GC_RET_RANDOMNAME_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_RET_RANDOMNAME_descriptor_,
      GC_RET_RANDOMNAME::default_instance_,
      GC_RET_RANDOMNAME_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_RET_RANDOMNAME, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_RET_RANDOMNAME, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_RET_RANDOMNAME));
  CG_REQ_CHANGE_SCENE_descriptor_ = file->message_type(11);
  static const int CG_REQ_CHANGE_SCENE_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_REQ_CHANGE_SCENE, ctype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_REQ_CHANGE_SCENE, teleportid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_REQ_CHANGE_SCENE, sceneclassid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_REQ_CHANGE_SCENE, sceneinstid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_REQ_CHANGE_SCENE, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_REQ_CHANGE_SCENE, posz_),
  };
  CG_REQ_CHANGE_SCENE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CG_REQ_CHANGE_SCENE_descriptor_,
      CG_REQ_CHANGE_SCENE::default_instance_,
      CG_REQ_CHANGE_SCENE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_REQ_CHANGE_SCENE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_REQ_CHANGE_SCENE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CG_REQ_CHANGE_SCENE));
  CG_REQ_CHANGE_SCENE_CHANGETYPE_descriptor_ = CG_REQ_CHANGE_SCENE_descriptor_->enum_type(0);
  GC_ENTER_SCENE_descriptor_ = file->message_type(12);
  static const int GC_ENTER_SCENE_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ENTER_SCENE, sceneclass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ENTER_SCENE, sceneinst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ENTER_SCENE, mainplayerserverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ENTER_SCENE, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ENTER_SCENE, posz_),
  };
  GC_ENTER_SCENE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_ENTER_SCENE_descriptor_,
      GC_ENTER_SCENE::default_instance_,
      GC_ENTER_SCENE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ENTER_SCENE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ENTER_SCENE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_ENTER_SCENE));
  CG_ENTER_SCENE_OK_descriptor_ = file->message_type(13);
  static const int CG_ENTER_SCENE_OK_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_ENTER_SCENE_OK, isok_),
  };
  CG_ENTER_SCENE_OK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CG_ENTER_SCENE_OK_descriptor_,
      CG_ENTER_SCENE_OK::default_instance_,
      CG_ENTER_SCENE_OK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_ENTER_SCENE_OK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_ENTER_SCENE_OK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CG_ENTER_SCENE_OK));
  CG_CONNECTED_HEARTBEAT_descriptor_ = file->message_type(14);
  static const int CG_CONNECTED_HEARTBEAT_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_CONNECTED_HEARTBEAT, isresponse_),
  };
  CG_CONNECTED_HEARTBEAT_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CG_CONNECTED_HEARTBEAT_descriptor_,
      CG_CONNECTED_HEARTBEAT::default_instance_,
      CG_CONNECTED_HEARTBEAT_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_CONNECTED_HEARTBEAT, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_CONNECTED_HEARTBEAT, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CG_CONNECTED_HEARTBEAT));
  GC_CONNECTED_HEARTBEAT_descriptor_ = file->message_type(15);
  static const int GC_CONNECTED_HEARTBEAT_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CONNECTED_HEARTBEAT, serveransitime_),
  };
  GC_CONNECTED_HEARTBEAT_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_CONNECTED_HEARTBEAT_descriptor_,
      GC_CONNECTED_HEARTBEAT::default_instance_,
      GC_CONNECTED_HEARTBEAT_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CONNECTED_HEARTBEAT, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CONNECTED_HEARTBEAT, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_CONNECTED_HEARTBEAT));
  GC_NOTICE_descriptor_ = file->message_type(16);
  static const int GC_NOTICE_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_NOTICE, notice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_NOTICE, filterrepeat_),
  };
  GC_NOTICE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_NOTICE_descriptor_,
      GC_NOTICE::default_instance_,
      GC_NOTICE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_NOTICE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_NOTICE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_NOTICE));
  GC_MISSION_SYNC_MISSIONLIST_descriptor_ = file->message_type(17);
  static const int GC_MISSION_SYNC_MISSIONLIST_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MISSION_SYNC_MISSIONLIST, missionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MISSION_SYNC_MISSIONLIST, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MISSION_SYNC_MISSIONLIST, nparam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MISSION_SYNC_MISSIONLIST, havedoneflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MISSION_SYNC_MISSIONLIST, qualitytype_),
  };
  GC_MISSION_SYNC_MISSIONLIST_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_MISSION_SYNC_MISSIONLIST_descriptor_,
      GC_MISSION_SYNC_MISSIONLIST::default_instance_,
      GC_MISSION_SYNC_MISSIONLIST_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MISSION_SYNC_MISSIONLIST, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MISSION_SYNC_MISSIONLIST, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_MISSION_SYNC_MISSIONLIST));
  CG_ACCEPTMISSION_descriptor_ = file->message_type(18);
  static const int CG_ACCEPTMISSION_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_ACCEPTMISSION, missionid_),
  };
  CG_ACCEPTMISSION_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CG_ACCEPTMISSION_descriptor_,
      CG_ACCEPTMISSION::default_instance_,
      CG_ACCEPTMISSION_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_ACCEPTMISSION, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_ACCEPTMISSION, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CG_ACCEPTMISSION));
  GC_ACCEPTMISSION_RET_descriptor_ = file->message_type(19);
  static const int GC_ACCEPTMISSION_RET_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ACCEPTMISSION_RET, missionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ACCEPTMISSION_RET, qualitytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ACCEPTMISSION_RET, ret_),
  };
  GC_ACCEPTMISSION_RET_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_ACCEPTMISSION_RET_descriptor_,
      GC_ACCEPTMISSION_RET::default_instance_,
      GC_ACCEPTMISSION_RET_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ACCEPTMISSION_RET, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ACCEPTMISSION_RET, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_ACCEPTMISSION_RET));
  CG_COMPLETEMISSION_descriptor_ = file->message_type(20);
  static const int CG_COMPLETEMISSION_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_COMPLETEMISSION, missionid_),
  };
  CG_COMPLETEMISSION_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CG_COMPLETEMISSION_descriptor_,
      CG_COMPLETEMISSION::default_instance_,
      CG_COMPLETEMISSION_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_COMPLETEMISSION, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_COMPLETEMISSION, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CG_COMPLETEMISSION));
  GC_COMPLETEMISSION_RET_descriptor_ = file->message_type(21);
  static const int GC_COMPLETEMISSION_RET_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_COMPLETEMISSION_RET, missionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_COMPLETEMISSION_RET, ret_),
  };
  GC_COMPLETEMISSION_RET_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_COMPLETEMISSION_RET_descriptor_,
      GC_COMPLETEMISSION_RET::default_instance_,
      GC_COMPLETEMISSION_RET_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_COMPLETEMISSION_RET, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_COMPLETEMISSION_RET, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_COMPLETEMISSION_RET));
  CG_ABANDONMISSION_descriptor_ = file->message_type(22);
  static const int CG_ABANDONMISSION_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_ABANDONMISSION, missionid_),
  };
  CG_ABANDONMISSION_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CG_ABANDONMISSION_descriptor_,
      CG_ABANDONMISSION::default_instance_,
      CG_ABANDONMISSION_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_ABANDONMISSION, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_ABANDONMISSION, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CG_ABANDONMISSION));
  GC_ABANDONMISSION_RET_descriptor_ = file->message_type(23);
  static const int GC_ABANDONMISSION_RET_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ABANDONMISSION_RET, missionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ABANDONMISSION_RET, ret_),
  };
  GC_ABANDONMISSION_RET_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_ABANDONMISSION_RET_descriptor_,
      GC_ABANDONMISSION_RET::default_instance_,
      GC_ABANDONMISSION_RET_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ABANDONMISSION_RET, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ABANDONMISSION_RET, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_ABANDONMISSION_RET));
  GC_MISSION_STATE_descriptor_ = file->message_type(24);
  static const int GC_MISSION_STATE_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MISSION_STATE, missionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MISSION_STATE, state_),
  };
  GC_MISSION_STATE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_MISSION_STATE_descriptor_,
      GC_MISSION_STATE::default_instance_,
      GC_MISSION_STATE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MISSION_STATE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MISSION_STATE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_MISSION_STATE));
  GC_MISSION_PARAM_descriptor_ = file->message_type(25);
  static const int GC_MISSION_PARAM_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MISSION_PARAM, missionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MISSION_PARAM, paramindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MISSION_PARAM, param_),
  };
  GC_MISSION_PARAM_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_MISSION_PARAM_descriptor_,
      GC_MISSION_PARAM::default_instance_,
      GC_MISSION_PARAM_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MISSION_PARAM, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MISSION_PARAM, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_MISSION_PARAM));
  GC_CREATE_PLAYER_descriptor_ = file->message_type(26);
  static const int GC_CREATE_PLAYER_offsets_[31] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CREATE_PLAYER, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CREATE_PLAYER, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CREATE_PLAYER, sceneinst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CREATE_PLAYER, sceneclass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CREATE_PLAYER, dataid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CREATE_PLAYER, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CREATE_PLAYER, posz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CREATE_PLAYER, curforce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CREATE_PLAYER, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CREATE_PLAYER, curprofession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CREATE_PLAYER, facedir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CREATE_PLAYER, titlename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CREATE_PLAYER, isinpklist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CREATE_PLAYER, isdie_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CREATE_PLAYER, relivetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CREATE_PLAYER, pkmodle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CREATE_PLAYER, mountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CREATE_PLAYER, movespeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CREATE_PLAYER, modelvisualid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CREATE_PLAYER, weapondataid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CREATE_PLAYER, weaponeffectgem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CREATE_PLAYER, curtitleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CREATE_PLAYER, stealthlev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CREATE_PLAYER, vipcost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CREATE_PLAYER, guildguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CREATE_PLAYER, combatvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CREATE_PLAYER, bindparent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CREATE_PLAYER, bindchildren_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CREATE_PLAYER, isenemy2self_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CREATE_PLAYER, paoshangstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CREATE_PLAYER, lightskilllevel_),
  };
  GC_CREATE_PLAYER_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_CREATE_PLAYER_descriptor_,
      GC_CREATE_PLAYER::default_instance_,
      GC_CREATE_PLAYER_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CREATE_PLAYER, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_CREATE_PLAYER, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_CREATE_PLAYER));
  GC_DELETE_OBJ_descriptor_ = file->message_type(27);
  static const int GC_DELETE_OBJ_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DELETE_OBJ, serverid_),
  };
  GC_DELETE_OBJ_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_DELETE_OBJ_descriptor_,
      GC_DELETE_OBJ::default_instance_,
      GC_DELETE_OBJ_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DELETE_OBJ, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_DELETE_OBJ, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_DELETE_OBJ));
  CG_SYNC_POS_descriptor_ = file->message_type(28);
  static const int CG_SYNC_POS_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_SYNC_POS, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_SYNC_POS, posz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_SYNC_POS, ismoviong_),
  };
  CG_SYNC_POS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CG_SYNC_POS_descriptor_,
      CG_SYNC_POS::default_instance_,
      CG_SYNC_POS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_SYNC_POS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_SYNC_POS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CG_SYNC_POS));
  GC_SYNC_POS_descriptor_ = file->message_type(29);
  static const int GC_SYNC_POS_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_SYNC_POS, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_SYNC_POS, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_SYNC_POS, posz_),
  };
  GC_SYNC_POS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_SYNC_POS_descriptor_,
      GC_SYNC_POS::default_instance_,
      GC_SYNC_POS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_SYNC_POS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_SYNC_POS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_SYNC_POS));
  CG_MOVE_descriptor_ = file->message_type(30);
  static const int CG_MOVE_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_MOVE, poscount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_MOVE, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_MOVE, posz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_MOVE, ismoving_),
  };
  CG_MOVE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CG_MOVE_descriptor_,
      CG_MOVE::default_instance_,
      CG_MOVE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_MOVE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_MOVE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CG_MOVE));
  GC_MOVE_descriptor_ = file->message_type(31);
  static const int GC_MOVE_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MOVE, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MOVE, poscount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MOVE, posserial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MOVE, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MOVE, posz_),
  };
  GC_MOVE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_MOVE_descriptor_,
      GC_MOVE::default_instance_,
      GC_MOVE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MOVE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_MOVE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_MOVE));
  GC_STOP_descriptor_ = file->message_type(32);
  static const int GC_STOP_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_STOP, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_STOP, posserial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_STOP, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_STOP, posz_),
  };
  GC_STOP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_STOP_descriptor_,
      GC_STOP::default_instance_,
      GC_STOP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_STOP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_STOP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_STOP));
  GC_BROADCAST_ATTR_descriptor_ = file->message_type(33);
  static const int GC_BROADCAST_ATTR_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_BROADCAST_ATTR, objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_BROADCAST_ATTR, curprofession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_BROADCAST_ATTR, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_BROADCAST_ATTR, curforce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_BROADCAST_ATTR, movespeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_BROADCAST_ATTR, bdie_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_BROADCAST_ATTR, facedir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_BROADCAST_ATTR, modelvisualid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_BROADCAST_ATTR, weapondataid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_BROADCAST_ATTR, weaponeffectgem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_BROADCAST_ATTR, stealthlev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_BROADCAST_ATTR, vipcost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_BROADCAST_ATTR, combatvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_BROADCAST_ATTR, bindparent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_BROADCAST_ATTR, bindchildren_),
  };
  GC_BROADCAST_ATTR_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_BROADCAST_ATTR_descriptor_,
      GC_BROADCAST_ATTR::default_instance_,
      GC_BROADCAST_ATTR_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_BROADCAST_ATTR, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_BROADCAST_ATTR, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_BROADCAST_ATTR));
  GC_SYN_ATTR_descriptor_ = file->message_type(34);
  static const int GC_SYN_ATTR_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_SYN_ATTR, objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_SYN_ATTR, curhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_SYN_ATTR, curmp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_SYN_ATTR, curxp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_SYN_ATTR, maxhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_SYN_ATTR, maxmp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_SYN_ATTR, maxxp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_SYN_ATTR, curlev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_SYN_ATTR, curexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_SYN_ATTR, curmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_SYN_ATTR, curyuanbao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_SYN_ATTR, curbdyuanbao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_SYN_ATTR, curzhenqi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_SYN_ATTR, isincombat_),
  };
  GC_SYN_ATTR_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_SYN_ATTR_descriptor_,
      GC_SYN_ATTR::default_instance_,
      GC_SYN_ATTR_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_SYN_ATTR, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_SYN_ATTR, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_SYN_ATTR));
  GC_SYNC_COMMONDATA_descriptor_ = file->message_type(35);
  static const int GC_SYNC_COMMONDATA_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_SYNC_COMMONDATA, nindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_SYNC_COMMONDATA, nvalue_),
  };
  GC_SYNC_COMMONDATA_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_SYNC_COMMONDATA_descriptor_,
      GC_SYNC_COMMONDATA::default_instance_,
      GC_SYNC_COMMONDATA_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_SYNC_COMMONDATA, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_SYNC_COMMONDATA, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_SYNC_COMMONDATA));
  GC_SYNC_COMMONFLAG_descriptor_ = file->message_type(36);
  static const int GC_SYNC_COMMONFLAG_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_SYNC_COMMONFLAG, nindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_SYNC_COMMONFLAG, nvalue_),
  };
  GC_SYNC_COMMONFLAG_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_SYNC_COMMONFLAG_descriptor_,
      GC_SYNC_COMMONFLAG::default_instance_,
      GC_SYNC_COMMONFLAG_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_SYNC_COMMONFLAG, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_SYNC_COMMONFLAG, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_SYNC_COMMONFLAG));
  CG_ASK_SETCOMMONFLAG_descriptor_ = file->message_type(37);
  static const int CG_ASK_SETCOMMONFLAG_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_ASK_SETCOMMONFLAG, nbits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_ASK_SETCOMMONFLAG, nflag_),
  };
  CG_ASK_SETCOMMONFLAG_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CG_ASK_SETCOMMONFLAG_descriptor_,
      CG_ASK_SETCOMMONFLAG::default_instance_,
      CG_ASK_SETCOMMONFLAG_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_ASK_SETCOMMONFLAG, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_ASK_SETCOMMONFLAG, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CG_ASK_SETCOMMONFLAG));
  GC_ASK_COMMONFLAG_RET_descriptor_ = file->message_type(38);
  static const int GC_ASK_COMMONFLAG_RET_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ASK_COMMONFLAG_RET, nbits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ASK_COMMONFLAG_RET, nflag_),
  };
  GC_ASK_COMMONFLAG_RET_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_ASK_COMMONFLAG_RET_descriptor_,
      GC_ASK_COMMONFLAG_RET::default_instance_,
      GC_ASK_COMMONFLAG_RET_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ASK_COMMONFLAG_RET, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_ASK_COMMONFLAG_RET, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_ASK_COMMONFLAG_RET));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_PBMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CG_PING_descriptor_, &CG_PING::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_RET_PING_descriptor_, &GC_RET_PING::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CG_LOGIN_descriptor_, &CG_LOGIN::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_LOGIN_RET_descriptor_, &GC_LOGIN_RET::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_LOGIN_QUEUE_STATUS_descriptor_, &GC_LOGIN_QUEUE_STATUS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CG_CREATEROLE_descriptor_, &CG_CREATEROLE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_CREATEROLE_RET_descriptor_, &GC_CREATEROLE_RET::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CG_SELECTROLE_descriptor_, &CG_SELECTROLE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_SELECTROLE_RET_descriptor_, &GC_SELECTROLE_RET::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CG_REQ_RANDOMNAME_descriptor_, &CG_REQ_RANDOMNAME::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_RET_RANDOMNAME_descriptor_, &GC_RET_RANDOMNAME::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CG_REQ_CHANGE_SCENE_descriptor_, &CG_REQ_CHANGE_SCENE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_ENTER_SCENE_descriptor_, &GC_ENTER_SCENE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CG_ENTER_SCENE_OK_descriptor_, &CG_ENTER_SCENE_OK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CG_CONNECTED_HEARTBEAT_descriptor_, &CG_CONNECTED_HEARTBEAT::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_CONNECTED_HEARTBEAT_descriptor_, &GC_CONNECTED_HEARTBEAT::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_NOTICE_descriptor_, &GC_NOTICE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_MISSION_SYNC_MISSIONLIST_descriptor_, &GC_MISSION_SYNC_MISSIONLIST::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CG_ACCEPTMISSION_descriptor_, &CG_ACCEPTMISSION::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_ACCEPTMISSION_RET_descriptor_, &GC_ACCEPTMISSION_RET::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CG_COMPLETEMISSION_descriptor_, &CG_COMPLETEMISSION::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_COMPLETEMISSION_RET_descriptor_, &GC_COMPLETEMISSION_RET::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CG_ABANDONMISSION_descriptor_, &CG_ABANDONMISSION::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_ABANDONMISSION_RET_descriptor_, &GC_ABANDONMISSION_RET::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_MISSION_STATE_descriptor_, &GC_MISSION_STATE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_MISSION_PARAM_descriptor_, &GC_MISSION_PARAM::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_CREATE_PLAYER_descriptor_, &GC_CREATE_PLAYER::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_DELETE_OBJ_descriptor_, &GC_DELETE_OBJ::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CG_SYNC_POS_descriptor_, &CG_SYNC_POS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_SYNC_POS_descriptor_, &GC_SYNC_POS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CG_MOVE_descriptor_, &CG_MOVE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_MOVE_descriptor_, &GC_MOVE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_STOP_descriptor_, &GC_STOP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_BROADCAST_ATTR_descriptor_, &GC_BROADCAST_ATTR::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_SYN_ATTR_descriptor_, &GC_SYN_ATTR::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_SYNC_COMMONDATA_descriptor_, &GC_SYNC_COMMONDATA::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_SYNC_COMMONFLAG_descriptor_, &GC_SYNC_COMMONFLAG::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CG_ASK_SETCOMMONFLAG_descriptor_, &CG_ASK_SETCOMMONFLAG::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_ASK_COMMONFLAG_RET_descriptor_, &GC_ASK_COMMONFLAG_RET::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_PBMessage_2eproto() {
  delete CG_PING::default_instance_;
  delete CG_PING_reflection_;
  delete GC_RET_PING::default_instance_;
  delete GC_RET_PING_reflection_;
  delete CG_LOGIN::default_instance_;
  delete CG_LOGIN_reflection_;
  delete GC_LOGIN_RET::default_instance_;
  delete GC_LOGIN_RET_reflection_;
  delete GC_LOGIN_QUEUE_STATUS::default_instance_;
  delete GC_LOGIN_QUEUE_STATUS_reflection_;
  delete CG_CREATEROLE::default_instance_;
  delete CG_CREATEROLE_reflection_;
  delete GC_CREATEROLE_RET::default_instance_;
  delete GC_CREATEROLE_RET_reflection_;
  delete CG_SELECTROLE::default_instance_;
  delete CG_SELECTROLE_reflection_;
  delete GC_SELECTROLE_RET::default_instance_;
  delete GC_SELECTROLE_RET_reflection_;
  delete CG_REQ_RANDOMNAME::default_instance_;
  delete CG_REQ_RANDOMNAME_reflection_;
  delete GC_RET_RANDOMNAME::default_instance_;
  delete GC_RET_RANDOMNAME_reflection_;
  delete CG_REQ_CHANGE_SCENE::default_instance_;
  delete CG_REQ_CHANGE_SCENE_reflection_;
  delete GC_ENTER_SCENE::default_instance_;
  delete GC_ENTER_SCENE_reflection_;
  delete CG_ENTER_SCENE_OK::default_instance_;
  delete CG_ENTER_SCENE_OK_reflection_;
  delete CG_CONNECTED_HEARTBEAT::default_instance_;
  delete CG_CONNECTED_HEARTBEAT_reflection_;
  delete GC_CONNECTED_HEARTBEAT::default_instance_;
  delete GC_CONNECTED_HEARTBEAT_reflection_;
  delete GC_NOTICE::default_instance_;
  delete GC_NOTICE_reflection_;
  delete GC_MISSION_SYNC_MISSIONLIST::default_instance_;
  delete GC_MISSION_SYNC_MISSIONLIST_reflection_;
  delete CG_ACCEPTMISSION::default_instance_;
  delete CG_ACCEPTMISSION_reflection_;
  delete GC_ACCEPTMISSION_RET::default_instance_;
  delete GC_ACCEPTMISSION_RET_reflection_;
  delete CG_COMPLETEMISSION::default_instance_;
  delete CG_COMPLETEMISSION_reflection_;
  delete GC_COMPLETEMISSION_RET::default_instance_;
  delete GC_COMPLETEMISSION_RET_reflection_;
  delete CG_ABANDONMISSION::default_instance_;
  delete CG_ABANDONMISSION_reflection_;
  delete GC_ABANDONMISSION_RET::default_instance_;
  delete GC_ABANDONMISSION_RET_reflection_;
  delete GC_MISSION_STATE::default_instance_;
  delete GC_MISSION_STATE_reflection_;
  delete GC_MISSION_PARAM::default_instance_;
  delete GC_MISSION_PARAM_reflection_;
  delete GC_CREATE_PLAYER::default_instance_;
  delete GC_CREATE_PLAYER_reflection_;
  delete GC_DELETE_OBJ::default_instance_;
  delete GC_DELETE_OBJ_reflection_;
  delete CG_SYNC_POS::default_instance_;
  delete CG_SYNC_POS_reflection_;
  delete GC_SYNC_POS::default_instance_;
  delete GC_SYNC_POS_reflection_;
  delete CG_MOVE::default_instance_;
  delete CG_MOVE_reflection_;
  delete GC_MOVE::default_instance_;
  delete GC_MOVE_reflection_;
  delete GC_STOP::default_instance_;
  delete GC_STOP_reflection_;
  delete GC_BROADCAST_ATTR::default_instance_;
  delete GC_BROADCAST_ATTR_reflection_;
  delete GC_SYN_ATTR::default_instance_;
  delete GC_SYN_ATTR_reflection_;
  delete GC_SYNC_COMMONDATA::default_instance_;
  delete GC_SYNC_COMMONDATA_reflection_;
  delete GC_SYNC_COMMONFLAG::default_instance_;
  delete GC_SYNC_COMMONFLAG_reflection_;
  delete CG_ASK_SETCOMMONFLAG::default_instance_;
  delete CG_ASK_SETCOMMONFLAG_reflection_;
  delete GC_ASK_COMMONFLAG_RET::default_instance_;
  delete GC_ASK_COMMONFLAG_RET_reflection_;
}

void protobuf_AddDesc_PBMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017PBMessage.proto\"\032\n\007CG_PING\022\017\n\007noparam\030"
    "\001 \001(\005\"\036\n\013GC_RET_PING\022\017\n\007noparam\030\001 \001(\005\"\226\004"
    "\n\010CG_LOGIN\022\r\n\005vtype\030\001 \002(\005\022\023\n\013gameversion"
    "\030\002 \002(\005\022\026\n\016programversion\030\003 \002(\005\022\035\n\025public"
    "resourceversion\030\004 \002(\005\022\023\n\013maxpacketid\030\005 \002"
    "(\005\022\022\n\nforceenter\030\006 \002(\005\022\020\n\010deviceid\030\007 \002(\t"
    "\022\022\n\ndevicetype\030\010 \002(\t\022\025\n\rdeviceversion\030\t "
    "\002(\t\022\017\n\007account\030\n \002(\t\022\024\n\014validateinfo\030\013 \002"
    "(\t\022\021\n\tchannelid\030\014 \002(\t\022\024\n\014mediachannel\030\r "
    "\002(\t\022\031\n\021rapidvalidatecode\030\016 \002(\005\022\024\n\014reserv"
    "edint1\030\017 \002(\005\022\024\n\014reservedint2\030\020 \002(\005\022\024\n\014re"
    "servedint3\030\021 \002(\005\022\024\n\014reservedint4\030\022 \002(\005\022\027"
    "\n\017reservedstring1\030\023 \002(\t\022\027\n\017reservedstrin"
    "g2\030\024 \002(\t\022\027\n\017reservedstring3\030\025 \002(\t\022\027\n\017res"
    "ervedstring4\030\026 \002(\t\"\"\n\014VALIDATETYPE\022\010\n\004TE"
    "ST\020\000\022\010\n\004CYOU\020\001\"\352\004\n\014GC_LOGIN_RET\022\016\n\006resul"
    "t\030\001 \002(\005\022\026\n\016validateresult\030\002 \002(\005\022\016\n\006useri"
    "d\030\003 \002(\t\022\013\n\003oid\030\004 \002(\t\022\023\n\013accesstoken\030\005 \002("
    "\t\022\031\n\021rapidvalidatecode\030\006 \002(\005\022\024\n\014roleGUID"
    "List\030\007 \003(\004\022\024\n\014roleTypeList\030\010 \003(\005\022\026\n\016play"
    "erNameList\030\t \003(\t\022\025\n\rroleLevelList\030\n \003(\005\022"
    "\025\n\rModelVisualID\030\013 \003(\005\022\020\n\010WeaponID\030\014 \003(\005"
    "\022\027\n\017WeaponEffectGem\030\r \003(\005\"\245\001\n\013LOGINRESUL"
    "T\022\013\n\007SUCCESS\020\001\022\025\n\021ACCOUNTVERIFYFAIL\020\002\022\024\n"
    "\020READROLELISTFAIL\020\003\022\020\n\014ALREADYLOGIN\020\004\022\r\n"
    "\tQUEUEFULL\020\005\022\022\n\016NEEDFORCEENTER\020\006\022\022\n\016PACK"
    "ETNOTMATCH\020\007\022\023\n\017VERSIONNOTMATCH\020\010\"\237\001\n\016VA"
    "LIDATERESULT\022\006\n\002OK\020\000\022\032\n\026FAIL_VALIDATETYP"
    "EERROR\020\001\022\020\n\014FAIL_PERFORM\020\002\022\017\n\013FAIL_OPCOD"
    "E\020\003\022\014\n\010FAIL_TAG\020\004\022\016\n\nFAIL_STATE\020\005\022\024\n\020FAI"
    "L_DATA_STATUS\020\006\022\022\n\016FAIL_CHANNELID\020\007\"p\n\025G"
    "C_LOGIN_QUEUE_STATUS\022\016\n\006status\030\001 \002(\005\022\r\n\005"
    "index\030\002 \002(\005\"8\n\013QUEUESTATUS\022\016\n\nBEGINQUEUE"
    "\020\000\022\013\n\007QUEUING\020\001\022\014\n\010ENDQUEUE\020\002\"+\n\rCG_CREA"
    "TEROLE\022\014\n\004type\030\001 \002(\005\022\014\n\004name\030\002 \002(\t\"\202\002\n\021G"
    "C_CREATEROLE_RET\022\016\n\006result\030\001 \002(\005\022\022\n\nprof"
    "ession\030\002 \002(\005\022\022\n\nplayerGuid\030\003 \002(\004\022\022\n\nplay"
    "erName\030\004 \002(\t\"\240\001\n\021CREATEROLE_RESULT\022\026\n\022CR"
    "EATEROLE_SUCCESS\020\000\022\023\n\017CREATEROLE_FAIL\020\001\022"
    "\035\n\031CREATEROLE_FAIL_NAMEEXIST\020\002\022!\n\035CREATE"
    "ROLE_FAIL_NAMESCREENING\020\003\022\034\n\030CREATEROLE_"
    "FAIL_LONGNAME\020\004\"!\n\rCG_SELECTROLE\022\020\n\010role"
    "GUID\030\001 \002(\004\"y\n\021GC_SELECTROLE_RET\022\016\n\006resul"
    "t\030\001 \002(\005\022\022\n\nplayerGuid\030\002 \002(\004\"@\n\021SELECTROL"
    "E_RESULT\022\026\n\022SELECTROLE_SUCCESS\020\000\022\023\n\017SELE"
    "CTROLE_FAIL\020\001\"!\n\021CG_REQ_RANDOMNAME\022\014\n\004no"
    "ne\030\001 \002(\005\"\"\n\021GC_RET_RANDOMNAME\022\r\n\005names\030\001"
    " \003(\t\"\277\001\n\023CG_REQ_CHANGE_SCENE\022\r\n\005ctype\030\001 "
    "\002(\005\022\022\n\nteleportid\030\002 \002(\005\022\024\n\014sceneclassid\030"
    "\003 \002(\005\022\023\n\013sceneinstid\030\004 \002(\005\022\014\n\004posX\030\005 \002(\005"
    "\022\014\n\004posZ\030\006 \002(\005\">\n\nCHANGETYPE\022\014\n\010TELEPORT"
    "\020\000\022\014\n\010WORLDMAP\020\001\022\t\n\005TRAIL\020\002\022\t\n\005POINT\020\003\"o"
    "\n\016GC_ENTER_SCENE\022\022\n\nsceneclass\030\001 \002(\005\022\021\n\t"
    "sceneinst\030\002 \002(\005\022\032\n\022mainplayerserverid\030\003 "
    "\002(\005\022\014\n\004posX\030\004 \002(\005\022\014\n\004posZ\030\005 \002(\005\"!\n\021CG_EN"
    "TER_SCENE_OK\022\014\n\004isOK\030\001 \002(\005\",\n\026CG_CONNECT"
    "ED_HEARTBEAT\022\022\n\nisresponse\030\001 \002(\005\"0\n\026GC_C"
    "ONNECTED_HEARTBEAT\022\026\n\016serveransitime\030\001 \002"
    "(\005\"1\n\tGC_NOTICE\022\016\n\006notice\030\001 \002(\t\022\024\n\014filte"
    "rRepeat\030\002 \001(\005\"z\n\033GC_MISSION_SYNC_MISSION"
    "LIST\022\021\n\tmissionID\030\001 \003(\005\022\r\n\005state\030\002 \003(\005\022\016"
    "\n\006nParam\030\003 \003(\005\022\024\n\014havedoneFlag\030\004 \003(\r\022\023\n\013"
    "qualitytype\030\005 \003(\005\"%\n\020CG_ACCEPTMISSION\022\021\n"
    "\tMissionID\030\001 \002(\005\"K\n\024GC_ACCEPTMISSION_RET"
    "\022\021\n\tMissionID\030\001 \002(\005\022\023\n\013QualityType\030\002 \002(\005"
    "\022\013\n\003Ret\030\003 \002(\005\"\'\n\022CG_COMPLETEMISSION\022\021\n\tM"
    "issionID\030\001 \002(\005\"8\n\026GC_COMPLETEMISSION_RET"
    "\022\021\n\tMissionID\030\001 \002(\005\022\013\n\003Ret\030\002 \002(\005\"&\n\021CG_A"
    "BANDONMISSION\022\021\n\tMissionID\030\001 \002(\005\"7\n\025GC_A"
    "BANDONMISSION_RET\022\021\n\tMissionID\030\001 \002(\005\022\013\n\003"
    "Ret\030\002 \002(\005\"4\n\020GC_MISSION_STATE\022\021\n\tMission"
    "ID\030\001 \002(\005\022\r\n\005State\030\002 \002(\005\"H\n\020GC_MISSION_PA"
    "RAM\022\021\n\tMissionID\030\001 \002(\005\022\022\n\nParamIndex\030\002 \002"
    "(\005\022\r\n\005Param\030\003 \002(\005\"\343\004\n\020GC_CREATE_PLAYER\022\020"
    "\n\010serverId\030\001 \002(\005\022\014\n\004guid\030\002 \002(\004\022\021\n\tsceneI"
    "nst\030\003 \002(\005\022\022\n\nsceneClass\030\004 \002(\005\022\016\n\006dataId\030"
    "\005 \002(\005\022\014\n\004posX\030\006 \002(\005\022\014\n\004posZ\030\007 \002(\005\022\020\n\010cur"
    "force\030\010 \002(\005\022\014\n\004name\030\t \002(\t\022\025\n\rcurProfessi"
    "on\030\n \002(\005\022\017\n\007facedir\030\013 \002(\005\022\021\n\ttitlename\030\014"
    " \002(\t\022\022\n\nisInPkList\030\r \002(\005\022\r\n\005isDie\030\016 \002(\005\022"
    "\022\n\nReliveTime\030\017 \001(\005\022\017\n\007PKModle\030\020 \002(\005\022\017\n\007"
    "MountID\030\021 \002(\005\022\021\n\tMoveSpeed\030\022 \002(\005\022\025\n\rMode"
    "lVisualID\030\023 \002(\005\022\024\n\014WeaponDataID\030\024 \002(\005\022\027\n"
    "\017WeaponEffectGem\030\026 \002(\005\022\022\n\nCurTitleID\030\027 \002"
    "(\005\022\022\n\nStealthLev\030\030 \002(\005\022\017\n\007VipCost\030\031 \002(\005\022"
    "\021\n\tGuildGuid\030\032 \002(\004\022\023\n\013CombatValue\030\033 \002(\005\022"
    "\022\n\nbindparent\030\034 \002(\005\022\024\n\014bindchildren\030\035 \003("
    "\005\022\024\n\014isEnemy2Self\030\036 \002(\005\022\025\n\rpaoshangState"
    "\030\037 \001(\005\022\027\n\017lightSkillLevel\030  \001(\005\"!\n\rGC_DE"
    "LETE_OBJ\022\020\n\010serverId\030\001 \002(\005\"<\n\013CG_SYNC_PO"
    "S\022\014\n\004posX\030\001 \002(\005\022\014\n\004posZ\030\002 \002(\005\022\021\n\tismovio"
    "ng\030\003 \002(\005\";\n\013GC_SYNC_POS\022\020\n\010serverId\030\001 \002("
    "\005\022\014\n\004posX\030\002 \002(\005\022\014\n\004posZ\030\003 \002(\005\"I\n\007CG_MOVE"
    "\022\020\n\010poscount\030\001 \002(\005\022\014\n\004posx\030\002 \003(\005\022\014\n\004posz"
    "\030\003 \003(\005\022\020\n\010ismoving\030\004 \002(\005\"\\\n\007GC_MOVE\022\020\n\010s"
    "erverid\030\001 \002(\005\022\020\n\010poscount\030\002 \002(\005\022\021\n\tposse"
    "rial\030\003 \003(\005\022\014\n\004posx\030\004 \003(\005\022\014\n\004posz\030\005 \003(\005\"J"
    "\n\007GC_STOP\022\020\n\010serverid\030\001 \002(\005\022\021\n\tposserial"
    "\030\002 \002(\005\022\014\n\004posx\030\003 \002(\005\022\014\n\004posz\030\004 \002(\005\"\265\002\n\021G"
    "C_BROADCAST_ATTR\022\r\n\005ObjId\030\001 \002(\005\022\025\n\rCurPr"
    "ofession\030\002 \001(\005\022\014\n\004Name\030\003 \001(\t\022\020\n\010CurForce"
    "\030\004 \001(\005\022\021\n\tMoveSpeed\030\005 \001(\005\022\014\n\004bDie\030\006 \001(\005\022"
    "\017\n\007faceDir\030\007 \001(\005\022\025\n\rModelVisualID\030\010 \001(\005\022"
    "\024\n\014WeaponDataID\030\t \001(\005\022\027\n\017WeaponEffectGem"
    "\030\013 \001(\005\022\022\n\nStealthLev\030\014 \001(\005\022\017\n\007VipCost\030\r "
    "\001(\005\022\023\n\013CombatValue\030\016 \001(\005\022\022\n\nbindparent\030\017"
    " \001(\005\022\024\n\014bindchildren\030\020 \003(\005\"\371\001\n\013GC_SYN_AT"
    "TR\022\r\n\005ObjId\030\001 \002(\005\022\r\n\005CurHp\030\002 \001(\005\022\r\n\005CurM"
    "p\030\003 \001(\005\022\r\n\005CurXp\030\004 \001(\005\022\r\n\005MaxHP\030\005 \001(\005\022\r\n"
    "\005MaxMP\030\006 \001(\005\022\r\n\005MaxXP\030\007 \001(\005\022\016\n\006CurLev\030\010 "
    "\001(\005\022\016\n\006CurExp\030\t \001(\005\022\020\n\010CurMoney\030\n \001(\005\022\022\n"
    "\nCurYuanBao\030\013 \001(\005\022\024\n\014CurBDYuanBao\030\014 \001(\005\022"
    "\021\n\tCurZhenQi\030\r \001(\005\022\022\n\nisInCombat\030\016 \001(\005\"4"
    "\n\022GC_SYNC_COMMONDATA\022\016\n\006nIndex\030\001 \003(\005\022\016\n\006"
    "nValue\030\002 \003(\005\"4\n\022GC_SYNC_COMMONFLAG\022\016\n\006nI"
    "ndex\030\001 \003(\005\022\016\n\006nValue\030\002 \003(\005\"4\n\024CG_ASK_SET"
    "COMMONFLAG\022\r\n\005nBits\030\001 \002(\005\022\r\n\005nFlag\030\002 \002(\005"
    "\"5\n\025GC_ASK_COMMONFLAG_RET\022\r\n\005nBits\030\001 \002(\005"
    "\022\r\n\005nFlag\030\002 \002(\005", 4735);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PBMessage.proto", &protobuf_RegisterTypes);
  CG_PING::default_instance_ = new CG_PING();
  GC_RET_PING::default_instance_ = new GC_RET_PING();
  CG_LOGIN::default_instance_ = new CG_LOGIN();
  GC_LOGIN_RET::default_instance_ = new GC_LOGIN_RET();
  GC_LOGIN_QUEUE_STATUS::default_instance_ = new GC_LOGIN_QUEUE_STATUS();
  CG_CREATEROLE::default_instance_ = new CG_CREATEROLE();
  GC_CREATEROLE_RET::default_instance_ = new GC_CREATEROLE_RET();
  CG_SELECTROLE::default_instance_ = new CG_SELECTROLE();
  GC_SELECTROLE_RET::default_instance_ = new GC_SELECTROLE_RET();
  CG_REQ_RANDOMNAME::default_instance_ = new CG_REQ_RANDOMNAME();
  GC_RET_RANDOMNAME::default_instance_ = new GC_RET_RANDOMNAME();
  CG_REQ_CHANGE_SCENE::default_instance_ = new CG_REQ_CHANGE_SCENE();
  GC_ENTER_SCENE::default_instance_ = new GC_ENTER_SCENE();
  CG_ENTER_SCENE_OK::default_instance_ = new CG_ENTER_SCENE_OK();
  CG_CONNECTED_HEARTBEAT::default_instance_ = new CG_CONNECTED_HEARTBEAT();
  GC_CONNECTED_HEARTBEAT::default_instance_ = new GC_CONNECTED_HEARTBEAT();
  GC_NOTICE::default_instance_ = new GC_NOTICE();
  GC_MISSION_SYNC_MISSIONLIST::default_instance_ = new GC_MISSION_SYNC_MISSIONLIST();
  CG_ACCEPTMISSION::default_instance_ = new CG_ACCEPTMISSION();
  GC_ACCEPTMISSION_RET::default_instance_ = new GC_ACCEPTMISSION_RET();
  CG_COMPLETEMISSION::default_instance_ = new CG_COMPLETEMISSION();
  GC_COMPLETEMISSION_RET::default_instance_ = new GC_COMPLETEMISSION_RET();
  CG_ABANDONMISSION::default_instance_ = new CG_ABANDONMISSION();
  GC_ABANDONMISSION_RET::default_instance_ = new GC_ABANDONMISSION_RET();
  GC_MISSION_STATE::default_instance_ = new GC_MISSION_STATE();
  GC_MISSION_PARAM::default_instance_ = new GC_MISSION_PARAM();
  GC_CREATE_PLAYER::default_instance_ = new GC_CREATE_PLAYER();
  GC_DELETE_OBJ::default_instance_ = new GC_DELETE_OBJ();
  CG_SYNC_POS::default_instance_ = new CG_SYNC_POS();
  GC_SYNC_POS::default_instance_ = new GC_SYNC_POS();
  CG_MOVE::default_instance_ = new CG_MOVE();
  GC_MOVE::default_instance_ = new GC_MOVE();
  GC_STOP::default_instance_ = new GC_STOP();
  GC_BROADCAST_ATTR::default_instance_ = new GC_BROADCAST_ATTR();
  GC_SYN_ATTR::default_instance_ = new GC_SYN_ATTR();
  GC_SYNC_COMMONDATA::default_instance_ = new GC_SYNC_COMMONDATA();
  GC_SYNC_COMMONFLAG::default_instance_ = new GC_SYNC_COMMONFLAG();
  CG_ASK_SETCOMMONFLAG::default_instance_ = new CG_ASK_SETCOMMONFLAG();
  GC_ASK_COMMONFLAG_RET::default_instance_ = new GC_ASK_COMMONFLAG_RET();
  CG_PING::default_instance_->InitAsDefaultInstance();
  GC_RET_PING::default_instance_->InitAsDefaultInstance();
  CG_LOGIN::default_instance_->InitAsDefaultInstance();
  GC_LOGIN_RET::default_instance_->InitAsDefaultInstance();
  GC_LOGIN_QUEUE_STATUS::default_instance_->InitAsDefaultInstance();
  CG_CREATEROLE::default_instance_->InitAsDefaultInstance();
  GC_CREATEROLE_RET::default_instance_->InitAsDefaultInstance();
  CG_SELECTROLE::default_instance_->InitAsDefaultInstance();
  GC_SELECTROLE_RET::default_instance_->InitAsDefaultInstance();
  CG_REQ_RANDOMNAME::default_instance_->InitAsDefaultInstance();
  GC_RET_RANDOMNAME::default_instance_->InitAsDefaultInstance();
  CG_REQ_CHANGE_SCENE::default_instance_->InitAsDefaultInstance();
  GC_ENTER_SCENE::default_instance_->InitAsDefaultInstance();
  CG_ENTER_SCENE_OK::default_instance_->InitAsDefaultInstance();
  CG_CONNECTED_HEARTBEAT::default_instance_->InitAsDefaultInstance();
  GC_CONNECTED_HEARTBEAT::default_instance_->InitAsDefaultInstance();
  GC_NOTICE::default_instance_->InitAsDefaultInstance();
  GC_MISSION_SYNC_MISSIONLIST::default_instance_->InitAsDefaultInstance();
  CG_ACCEPTMISSION::default_instance_->InitAsDefaultInstance();
  GC_ACCEPTMISSION_RET::default_instance_->InitAsDefaultInstance();
  CG_COMPLETEMISSION::default_instance_->InitAsDefaultInstance();
  GC_COMPLETEMISSION_RET::default_instance_->InitAsDefaultInstance();
  CG_ABANDONMISSION::default_instance_->InitAsDefaultInstance();
  GC_ABANDONMISSION_RET::default_instance_->InitAsDefaultInstance();
  GC_MISSION_STATE::default_instance_->InitAsDefaultInstance();
  GC_MISSION_PARAM::default_instance_->InitAsDefaultInstance();
  GC_CREATE_PLAYER::default_instance_->InitAsDefaultInstance();
  GC_DELETE_OBJ::default_instance_->InitAsDefaultInstance();
  CG_SYNC_POS::default_instance_->InitAsDefaultInstance();
  GC_SYNC_POS::default_instance_->InitAsDefaultInstance();
  CG_MOVE::default_instance_->InitAsDefaultInstance();
  GC_MOVE::default_instance_->InitAsDefaultInstance();
  GC_STOP::default_instance_->InitAsDefaultInstance();
  GC_BROADCAST_ATTR::default_instance_->InitAsDefaultInstance();
  GC_SYN_ATTR::default_instance_->InitAsDefaultInstance();
  GC_SYNC_COMMONDATA::default_instance_->InitAsDefaultInstance();
  GC_SYNC_COMMONFLAG::default_instance_->InitAsDefaultInstance();
  CG_ASK_SETCOMMONFLAG::default_instance_->InitAsDefaultInstance();
  GC_ASK_COMMONFLAG_RET::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PBMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PBMessage_2eproto {
  StaticDescriptorInitializer_PBMessage_2eproto() {
    protobuf_AddDesc_PBMessage_2eproto();
  }
} static_descriptor_initializer_PBMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CG_PING::kNoparamFieldNumber;
#endif  // !_MSC_VER

CG_PING::CG_PING()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CG_PING::InitAsDefaultInstance() {
}

CG_PING::CG_PING(const CG_PING& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CG_PING::SharedCtor() {
  _cached_size_ = 0;
  noparam_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CG_PING::~CG_PING() {
  SharedDtor();
}

void CG_PING::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CG_PING::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CG_PING::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CG_PING_descriptor_;
}

const CG_PING& CG_PING::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

CG_PING* CG_PING::default_instance_ = NULL;

CG_PING* CG_PING::New() const {
  return new CG_PING;
}

void CG_PING::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    noparam_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CG_PING::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 noparam = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &noparam_)));
          set_has_noparam();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CG_PING::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 noparam = 1;
  if (has_noparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->noparam(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CG_PING::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 noparam = 1;
  if (has_noparam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->noparam(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CG_PING::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 noparam = 1;
    if (has_noparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->noparam());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CG_PING::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CG_PING* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CG_PING*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CG_PING::MergeFrom(const CG_PING& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_noparam()) {
      set_noparam(from.noparam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CG_PING::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CG_PING::CopyFrom(const CG_PING& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CG_PING::IsInitialized() const {

  return true;
}

void CG_PING::Swap(CG_PING* other) {
  if (other != this) {
    std::swap(noparam_, other->noparam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CG_PING::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CG_PING_descriptor_;
  metadata.reflection = CG_PING_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_RET_PING::kNoparamFieldNumber;
#endif  // !_MSC_VER

GC_RET_PING::GC_RET_PING()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_RET_PING::InitAsDefaultInstance() {
}

GC_RET_PING::GC_RET_PING(const GC_RET_PING& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_RET_PING::SharedCtor() {
  _cached_size_ = 0;
  noparam_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_RET_PING::~GC_RET_PING() {
  SharedDtor();
}

void GC_RET_PING::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_RET_PING::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_RET_PING::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_RET_PING_descriptor_;
}

const GC_RET_PING& GC_RET_PING::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_RET_PING* GC_RET_PING::default_instance_ = NULL;

GC_RET_PING* GC_RET_PING::New() const {
  return new GC_RET_PING;
}

void GC_RET_PING::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    noparam_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_RET_PING::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 noparam = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &noparam_)));
          set_has_noparam();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_RET_PING::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 noparam = 1;
  if (has_noparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->noparam(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_RET_PING::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 noparam = 1;
  if (has_noparam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->noparam(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_RET_PING::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 noparam = 1;
    if (has_noparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->noparam());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_RET_PING::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_RET_PING* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_RET_PING*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_RET_PING::MergeFrom(const GC_RET_PING& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_noparam()) {
      set_noparam(from.noparam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_RET_PING::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_RET_PING::CopyFrom(const GC_RET_PING& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_RET_PING::IsInitialized() const {

  return true;
}

void GC_RET_PING::Swap(GC_RET_PING* other) {
  if (other != this) {
    std::swap(noparam_, other->noparam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_RET_PING::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_RET_PING_descriptor_;
  metadata.reflection = GC_RET_PING_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CG_LOGIN_VALIDATETYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CG_LOGIN_VALIDATETYPE_descriptor_;
}
bool CG_LOGIN_VALIDATETYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CG_LOGIN_VALIDATETYPE CG_LOGIN::TEST;
const CG_LOGIN_VALIDATETYPE CG_LOGIN::CYOU;
const CG_LOGIN_VALIDATETYPE CG_LOGIN::VALIDATETYPE_MIN;
const CG_LOGIN_VALIDATETYPE CG_LOGIN::VALIDATETYPE_MAX;
const int CG_LOGIN::VALIDATETYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CG_LOGIN::kVtypeFieldNumber;
const int CG_LOGIN::kGameversionFieldNumber;
const int CG_LOGIN::kProgramversionFieldNumber;
const int CG_LOGIN::kPublicresourceversionFieldNumber;
const int CG_LOGIN::kMaxpacketidFieldNumber;
const int CG_LOGIN::kForceenterFieldNumber;
const int CG_LOGIN::kDeviceidFieldNumber;
const int CG_LOGIN::kDevicetypeFieldNumber;
const int CG_LOGIN::kDeviceversionFieldNumber;
const int CG_LOGIN::kAccountFieldNumber;
const int CG_LOGIN::kValidateinfoFieldNumber;
const int CG_LOGIN::kChannelidFieldNumber;
const int CG_LOGIN::kMediachannelFieldNumber;
const int CG_LOGIN::kRapidvalidatecodeFieldNumber;
const int CG_LOGIN::kReservedint1FieldNumber;
const int CG_LOGIN::kReservedint2FieldNumber;
const int CG_LOGIN::kReservedint3FieldNumber;
const int CG_LOGIN::kReservedint4FieldNumber;
const int CG_LOGIN::kReservedstring1FieldNumber;
const int CG_LOGIN::kReservedstring2FieldNumber;
const int CG_LOGIN::kReservedstring3FieldNumber;
const int CG_LOGIN::kReservedstring4FieldNumber;
#endif  // !_MSC_VER

CG_LOGIN::CG_LOGIN()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CG_LOGIN::InitAsDefaultInstance() {
}

CG_LOGIN::CG_LOGIN(const CG_LOGIN& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CG_LOGIN::SharedCtor() {
  _cached_size_ = 0;
  vtype_ = 0;
  gameversion_ = 0;
  programversion_ = 0;
  publicresourceversion_ = 0;
  maxpacketid_ = 0;
  forceenter_ = 0;
  deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  devicetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  deviceversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  validateinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mediachannel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rapidvalidatecode_ = 0;
  reservedint1_ = 0;
  reservedint2_ = 0;
  reservedint3_ = 0;
  reservedint4_ = 0;
  reservedstring1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  reservedstring2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  reservedstring3_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  reservedstring4_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CG_LOGIN::~CG_LOGIN() {
  SharedDtor();
}

void CG_LOGIN::SharedDtor() {
  if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
    delete deviceid_;
  }
  if (devicetype_ != &::google::protobuf::internal::kEmptyString) {
    delete devicetype_;
  }
  if (deviceversion_ != &::google::protobuf::internal::kEmptyString) {
    delete deviceversion_;
  }
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (validateinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete validateinfo_;
  }
  if (channelid_ != &::google::protobuf::internal::kEmptyString) {
    delete channelid_;
  }
  if (mediachannel_ != &::google::protobuf::internal::kEmptyString) {
    delete mediachannel_;
  }
  if (reservedstring1_ != &::google::protobuf::internal::kEmptyString) {
    delete reservedstring1_;
  }
  if (reservedstring2_ != &::google::protobuf::internal::kEmptyString) {
    delete reservedstring2_;
  }
  if (reservedstring3_ != &::google::protobuf::internal::kEmptyString) {
    delete reservedstring3_;
  }
  if (reservedstring4_ != &::google::protobuf::internal::kEmptyString) {
    delete reservedstring4_;
  }
  if (this != default_instance_) {
  }
}

void CG_LOGIN::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CG_LOGIN::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CG_LOGIN_descriptor_;
}

const CG_LOGIN& CG_LOGIN::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

CG_LOGIN* CG_LOGIN::default_instance_ = NULL;

CG_LOGIN* CG_LOGIN::New() const {
  return new CG_LOGIN;
}

void CG_LOGIN::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    vtype_ = 0;
    gameversion_ = 0;
    programversion_ = 0;
    publicresourceversion_ = 0;
    maxpacketid_ = 0;
    forceenter_ = 0;
    if (has_deviceid()) {
      if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
        deviceid_->clear();
      }
    }
    if (has_devicetype()) {
      if (devicetype_ != &::google::protobuf::internal::kEmptyString) {
        devicetype_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_deviceversion()) {
      if (deviceversion_ != &::google::protobuf::internal::kEmptyString) {
        deviceversion_->clear();
      }
    }
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_validateinfo()) {
      if (validateinfo_ != &::google::protobuf::internal::kEmptyString) {
        validateinfo_->clear();
      }
    }
    if (has_channelid()) {
      if (channelid_ != &::google::protobuf::internal::kEmptyString) {
        channelid_->clear();
      }
    }
    if (has_mediachannel()) {
      if (mediachannel_ != &::google::protobuf::internal::kEmptyString) {
        mediachannel_->clear();
      }
    }
    rapidvalidatecode_ = 0;
    reservedint1_ = 0;
    reservedint2_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    reservedint3_ = 0;
    reservedint4_ = 0;
    if (has_reservedstring1()) {
      if (reservedstring1_ != &::google::protobuf::internal::kEmptyString) {
        reservedstring1_->clear();
      }
    }
    if (has_reservedstring2()) {
      if (reservedstring2_ != &::google::protobuf::internal::kEmptyString) {
        reservedstring2_->clear();
      }
    }
    if (has_reservedstring3()) {
      if (reservedstring3_ != &::google::protobuf::internal::kEmptyString) {
        reservedstring3_->clear();
      }
    }
    if (has_reservedstring4()) {
      if (reservedstring4_ != &::google::protobuf::internal::kEmptyString) {
        reservedstring4_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CG_LOGIN::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 vtype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vtype_)));
          set_has_vtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameversion;
        break;
      }

      // required int32 gameversion = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameversion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameversion_)));
          set_has_gameversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_programversion;
        break;
      }

      // required int32 programversion = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_programversion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &programversion_)));
          set_has_programversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_publicresourceversion;
        break;
      }

      // required int32 publicresourceversion = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_publicresourceversion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &publicresourceversion_)));
          set_has_publicresourceversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_maxpacketid;
        break;
      }

      // required int32 maxpacketid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxpacketid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxpacketid_)));
          set_has_maxpacketid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_forceenter;
        break;
      }

      // required int32 forceenter = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_forceenter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &forceenter_)));
          set_has_forceenter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_deviceid;
        break;
      }

      // required string deviceid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->deviceid().data(), this->deviceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_devicetype;
        break;
      }

      // required string devicetype = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_devicetype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicetype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->devicetype().data(), this->devicetype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_deviceversion;
        break;
      }

      // required string deviceversion = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceversion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceversion()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->deviceversion().data(), this->deviceversion().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_account;
        break;
      }

      // required string account = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_validateinfo;
        break;
      }

      // required string validateinfo = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_validateinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_validateinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->validateinfo().data(), this->validateinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_channelid;
        break;
      }

      // required string channelid = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channelid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channelid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channelid().data(), this->channelid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_mediachannel;
        break;
      }

      // required string mediachannel = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mediachannel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mediachannel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mediachannel().data(), this->mediachannel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_rapidvalidatecode;
        break;
      }

      // required int32 rapidvalidatecode = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rapidvalidatecode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rapidvalidatecode_)));
          set_has_rapidvalidatecode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_reservedint1;
        break;
      }

      // required int32 reservedint1 = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reservedint1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reservedint1_)));
          set_has_reservedint1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_reservedint2;
        break;
      }

      // required int32 reservedint2 = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reservedint2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reservedint2_)));
          set_has_reservedint2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_reservedint3;
        break;
      }

      // required int32 reservedint3 = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reservedint3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reservedint3_)));
          set_has_reservedint3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_reservedint4;
        break;
      }

      // required int32 reservedint4 = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reservedint4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reservedint4_)));
          set_has_reservedint4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_reservedstring1;
        break;
      }

      // required string reservedstring1 = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reservedstring1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reservedstring1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->reservedstring1().data(), this->reservedstring1().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_reservedstring2;
        break;
      }

      // required string reservedstring2 = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reservedstring2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reservedstring2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->reservedstring2().data(), this->reservedstring2().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_reservedstring3;
        break;
      }

      // required string reservedstring3 = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reservedstring3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reservedstring3()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->reservedstring3().data(), this->reservedstring3().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_reservedstring4;
        break;
      }

      // required string reservedstring4 = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reservedstring4:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reservedstring4()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->reservedstring4().data(), this->reservedstring4().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CG_LOGIN::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 vtype = 1;
  if (has_vtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->vtype(), output);
  }

  // required int32 gameversion = 2;
  if (has_gameversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameversion(), output);
  }

  // required int32 programversion = 3;
  if (has_programversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->programversion(), output);
  }

  // required int32 publicresourceversion = 4;
  if (has_publicresourceversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->publicresourceversion(), output);
  }

  // required int32 maxpacketid = 5;
  if (has_maxpacketid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->maxpacketid(), output);
  }

  // required int32 forceenter = 6;
  if (has_forceenter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->forceenter(), output);
  }

  // required string deviceid = 7;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->deviceid(), output);
  }

  // required string devicetype = 8;
  if (has_devicetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->devicetype().data(), this->devicetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->devicetype(), output);
  }

  // required string deviceversion = 9;
  if (has_deviceversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceversion().data(), this->deviceversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->deviceversion(), output);
  }

  // required string account = 10;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->account(), output);
  }

  // required string validateinfo = 11;
  if (has_validateinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->validateinfo().data(), this->validateinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->validateinfo(), output);
  }

  // required string channelid = 12;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channelid().data(), this->channelid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->channelid(), output);
  }

  // required string mediachannel = 13;
  if (has_mediachannel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mediachannel().data(), this->mediachannel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->mediachannel(), output);
  }

  // required int32 rapidvalidatecode = 14;
  if (has_rapidvalidatecode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->rapidvalidatecode(), output);
  }

  // required int32 reservedint1 = 15;
  if (has_reservedint1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->reservedint1(), output);
  }

  // required int32 reservedint2 = 16;
  if (has_reservedint2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->reservedint2(), output);
  }

  // required int32 reservedint3 = 17;
  if (has_reservedint3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->reservedint3(), output);
  }

  // required int32 reservedint4 = 18;
  if (has_reservedint4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->reservedint4(), output);
  }

  // required string reservedstring1 = 19;
  if (has_reservedstring1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reservedstring1().data(), this->reservedstring1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->reservedstring1(), output);
  }

  // required string reservedstring2 = 20;
  if (has_reservedstring2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reservedstring2().data(), this->reservedstring2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->reservedstring2(), output);
  }

  // required string reservedstring3 = 21;
  if (has_reservedstring3()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reservedstring3().data(), this->reservedstring3().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->reservedstring3(), output);
  }

  // required string reservedstring4 = 22;
  if (has_reservedstring4()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reservedstring4().data(), this->reservedstring4().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->reservedstring4(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CG_LOGIN::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 vtype = 1;
  if (has_vtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->vtype(), target);
  }

  // required int32 gameversion = 2;
  if (has_gameversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gameversion(), target);
  }

  // required int32 programversion = 3;
  if (has_programversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->programversion(), target);
  }

  // required int32 publicresourceversion = 4;
  if (has_publicresourceversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->publicresourceversion(), target);
  }

  // required int32 maxpacketid = 5;
  if (has_maxpacketid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->maxpacketid(), target);
  }

  // required int32 forceenter = 6;
  if (has_forceenter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->forceenter(), target);
  }

  // required string deviceid = 7;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->deviceid(), target);
  }

  // required string devicetype = 8;
  if (has_devicetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->devicetype().data(), this->devicetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->devicetype(), target);
  }

  // required string deviceversion = 9;
  if (has_deviceversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceversion().data(), this->deviceversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->deviceversion(), target);
  }

  // required string account = 10;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->account(), target);
  }

  // required string validateinfo = 11;
  if (has_validateinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->validateinfo().data(), this->validateinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->validateinfo(), target);
  }

  // required string channelid = 12;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channelid().data(), this->channelid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->channelid(), target);
  }

  // required string mediachannel = 13;
  if (has_mediachannel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mediachannel().data(), this->mediachannel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->mediachannel(), target);
  }

  // required int32 rapidvalidatecode = 14;
  if (has_rapidvalidatecode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->rapidvalidatecode(), target);
  }

  // required int32 reservedint1 = 15;
  if (has_reservedint1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->reservedint1(), target);
  }

  // required int32 reservedint2 = 16;
  if (has_reservedint2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->reservedint2(), target);
  }

  // required int32 reservedint3 = 17;
  if (has_reservedint3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->reservedint3(), target);
  }

  // required int32 reservedint4 = 18;
  if (has_reservedint4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->reservedint4(), target);
  }

  // required string reservedstring1 = 19;
  if (has_reservedstring1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reservedstring1().data(), this->reservedstring1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->reservedstring1(), target);
  }

  // required string reservedstring2 = 20;
  if (has_reservedstring2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reservedstring2().data(), this->reservedstring2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->reservedstring2(), target);
  }

  // required string reservedstring3 = 21;
  if (has_reservedstring3()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reservedstring3().data(), this->reservedstring3().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->reservedstring3(), target);
  }

  // required string reservedstring4 = 22;
  if (has_reservedstring4()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reservedstring4().data(), this->reservedstring4().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->reservedstring4(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CG_LOGIN::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 vtype = 1;
    if (has_vtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vtype());
    }

    // required int32 gameversion = 2;
    if (has_gameversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameversion());
    }

    // required int32 programversion = 3;
    if (has_programversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->programversion());
    }

    // required int32 publicresourceversion = 4;
    if (has_publicresourceversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->publicresourceversion());
    }

    // required int32 maxpacketid = 5;
    if (has_maxpacketid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxpacketid());
    }

    // required int32 forceenter = 6;
    if (has_forceenter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->forceenter());
    }

    // required string deviceid = 7;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deviceid());
    }

    // required string devicetype = 8;
    if (has_devicetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devicetype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string deviceversion = 9;
    if (has_deviceversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deviceversion());
    }

    // required string account = 10;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // required string validateinfo = 11;
    if (has_validateinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->validateinfo());
    }

    // required string channelid = 12;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channelid());
    }

    // required string mediachannel = 13;
    if (has_mediachannel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mediachannel());
    }

    // required int32 rapidvalidatecode = 14;
    if (has_rapidvalidatecode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rapidvalidatecode());
    }

    // required int32 reservedint1 = 15;
    if (has_reservedint1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reservedint1());
    }

    // required int32 reservedint2 = 16;
    if (has_reservedint2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reservedint2());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int32 reservedint3 = 17;
    if (has_reservedint3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reservedint3());
    }

    // required int32 reservedint4 = 18;
    if (has_reservedint4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reservedint4());
    }

    // required string reservedstring1 = 19;
    if (has_reservedstring1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reservedstring1());
    }

    // required string reservedstring2 = 20;
    if (has_reservedstring2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reservedstring2());
    }

    // required string reservedstring3 = 21;
    if (has_reservedstring3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reservedstring3());
    }

    // required string reservedstring4 = 22;
    if (has_reservedstring4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reservedstring4());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CG_LOGIN::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CG_LOGIN* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CG_LOGIN*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CG_LOGIN::MergeFrom(const CG_LOGIN& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_vtype()) {
      set_vtype(from.vtype());
    }
    if (from.has_gameversion()) {
      set_gameversion(from.gameversion());
    }
    if (from.has_programversion()) {
      set_programversion(from.programversion());
    }
    if (from.has_publicresourceversion()) {
      set_publicresourceversion(from.publicresourceversion());
    }
    if (from.has_maxpacketid()) {
      set_maxpacketid(from.maxpacketid());
    }
    if (from.has_forceenter()) {
      set_forceenter(from.forceenter());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_devicetype()) {
      set_devicetype(from.devicetype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_deviceversion()) {
      set_deviceversion(from.deviceversion());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_validateinfo()) {
      set_validateinfo(from.validateinfo());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_mediachannel()) {
      set_mediachannel(from.mediachannel());
    }
    if (from.has_rapidvalidatecode()) {
      set_rapidvalidatecode(from.rapidvalidatecode());
    }
    if (from.has_reservedint1()) {
      set_reservedint1(from.reservedint1());
    }
    if (from.has_reservedint2()) {
      set_reservedint2(from.reservedint2());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_reservedint3()) {
      set_reservedint3(from.reservedint3());
    }
    if (from.has_reservedint4()) {
      set_reservedint4(from.reservedint4());
    }
    if (from.has_reservedstring1()) {
      set_reservedstring1(from.reservedstring1());
    }
    if (from.has_reservedstring2()) {
      set_reservedstring2(from.reservedstring2());
    }
    if (from.has_reservedstring3()) {
      set_reservedstring3(from.reservedstring3());
    }
    if (from.has_reservedstring4()) {
      set_reservedstring4(from.reservedstring4());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CG_LOGIN::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CG_LOGIN::CopyFrom(const CG_LOGIN& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CG_LOGIN::IsInitialized() const {
  if ((_has_bits_[0] & 0x003fffff) != 0x003fffff) return false;

  return true;
}

void CG_LOGIN::Swap(CG_LOGIN* other) {
  if (other != this) {
    std::swap(vtype_, other->vtype_);
    std::swap(gameversion_, other->gameversion_);
    std::swap(programversion_, other->programversion_);
    std::swap(publicresourceversion_, other->publicresourceversion_);
    std::swap(maxpacketid_, other->maxpacketid_);
    std::swap(forceenter_, other->forceenter_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(devicetype_, other->devicetype_);
    std::swap(deviceversion_, other->deviceversion_);
    std::swap(account_, other->account_);
    std::swap(validateinfo_, other->validateinfo_);
    std::swap(channelid_, other->channelid_);
    std::swap(mediachannel_, other->mediachannel_);
    std::swap(rapidvalidatecode_, other->rapidvalidatecode_);
    std::swap(reservedint1_, other->reservedint1_);
    std::swap(reservedint2_, other->reservedint2_);
    std::swap(reservedint3_, other->reservedint3_);
    std::swap(reservedint4_, other->reservedint4_);
    std::swap(reservedstring1_, other->reservedstring1_);
    std::swap(reservedstring2_, other->reservedstring2_);
    std::swap(reservedstring3_, other->reservedstring3_);
    std::swap(reservedstring4_, other->reservedstring4_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CG_LOGIN::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CG_LOGIN_descriptor_;
  metadata.reflection = CG_LOGIN_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GC_LOGIN_RET_LOGINRESULT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_LOGIN_RET_LOGINRESULT_descriptor_;
}
bool GC_LOGIN_RET_LOGINRESULT_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GC_LOGIN_RET_LOGINRESULT GC_LOGIN_RET::SUCCESS;
const GC_LOGIN_RET_LOGINRESULT GC_LOGIN_RET::ACCOUNTVERIFYFAIL;
const GC_LOGIN_RET_LOGINRESULT GC_LOGIN_RET::READROLELISTFAIL;
const GC_LOGIN_RET_LOGINRESULT GC_LOGIN_RET::ALREADYLOGIN;
const GC_LOGIN_RET_LOGINRESULT GC_LOGIN_RET::QUEUEFULL;
const GC_LOGIN_RET_LOGINRESULT GC_LOGIN_RET::NEEDFORCEENTER;
const GC_LOGIN_RET_LOGINRESULT GC_LOGIN_RET::PACKETNOTMATCH;
const GC_LOGIN_RET_LOGINRESULT GC_LOGIN_RET::VERSIONNOTMATCH;
const GC_LOGIN_RET_LOGINRESULT GC_LOGIN_RET::LOGINRESULT_MIN;
const GC_LOGIN_RET_LOGINRESULT GC_LOGIN_RET::LOGINRESULT_MAX;
const int GC_LOGIN_RET::LOGINRESULT_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* GC_LOGIN_RET_VALIDATERESULT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_LOGIN_RET_VALIDATERESULT_descriptor_;
}
bool GC_LOGIN_RET_VALIDATERESULT_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GC_LOGIN_RET_VALIDATERESULT GC_LOGIN_RET::OK;
const GC_LOGIN_RET_VALIDATERESULT GC_LOGIN_RET::FAIL_VALIDATETYPEERROR;
const GC_LOGIN_RET_VALIDATERESULT GC_LOGIN_RET::FAIL_PERFORM;
const GC_LOGIN_RET_VALIDATERESULT GC_LOGIN_RET::FAIL_OPCODE;
const GC_LOGIN_RET_VALIDATERESULT GC_LOGIN_RET::FAIL_TAG;
const GC_LOGIN_RET_VALIDATERESULT GC_LOGIN_RET::FAIL_STATE;
const GC_LOGIN_RET_VALIDATERESULT GC_LOGIN_RET::FAIL_DATA_STATUS;
const GC_LOGIN_RET_VALIDATERESULT GC_LOGIN_RET::FAIL_CHANNELID;
const GC_LOGIN_RET_VALIDATERESULT GC_LOGIN_RET::VALIDATERESULT_MIN;
const GC_LOGIN_RET_VALIDATERESULT GC_LOGIN_RET::VALIDATERESULT_MAX;
const int GC_LOGIN_RET::VALIDATERESULT_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GC_LOGIN_RET::kResultFieldNumber;
const int GC_LOGIN_RET::kValidateresultFieldNumber;
const int GC_LOGIN_RET::kUseridFieldNumber;
const int GC_LOGIN_RET::kOidFieldNumber;
const int GC_LOGIN_RET::kAccesstokenFieldNumber;
const int GC_LOGIN_RET::kRapidvalidatecodeFieldNumber;
const int GC_LOGIN_RET::kRoleGUIDListFieldNumber;
const int GC_LOGIN_RET::kRoleTypeListFieldNumber;
const int GC_LOGIN_RET::kPlayerNameListFieldNumber;
const int GC_LOGIN_RET::kRoleLevelListFieldNumber;
const int GC_LOGIN_RET::kModelVisualIDFieldNumber;
const int GC_LOGIN_RET::kWeaponIDFieldNumber;
const int GC_LOGIN_RET::kWeaponEffectGemFieldNumber;
#endif  // !_MSC_VER

GC_LOGIN_RET::GC_LOGIN_RET()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_LOGIN_RET::InitAsDefaultInstance() {
}

GC_LOGIN_RET::GC_LOGIN_RET(const GC_LOGIN_RET& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_LOGIN_RET::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  validateresult_ = 0;
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  oid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  accesstoken_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rapidvalidatecode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_LOGIN_RET::~GC_LOGIN_RET() {
  SharedDtor();
}

void GC_LOGIN_RET::SharedDtor() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (oid_ != &::google::protobuf::internal::kEmptyString) {
    delete oid_;
  }
  if (accesstoken_ != &::google::protobuf::internal::kEmptyString) {
    delete accesstoken_;
  }
  if (this != default_instance_) {
  }
}

void GC_LOGIN_RET::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_LOGIN_RET::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_LOGIN_RET_descriptor_;
}

const GC_LOGIN_RET& GC_LOGIN_RET::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_LOGIN_RET* GC_LOGIN_RET::default_instance_ = NULL;

GC_LOGIN_RET* GC_LOGIN_RET::New() const {
  return new GC_LOGIN_RET;
}

void GC_LOGIN_RET::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    validateresult_ = 0;
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
    if (has_oid()) {
      if (oid_ != &::google::protobuf::internal::kEmptyString) {
        oid_->clear();
      }
    }
    if (has_accesstoken()) {
      if (accesstoken_ != &::google::protobuf::internal::kEmptyString) {
        accesstoken_->clear();
      }
    }
    rapidvalidatecode_ = 0;
  }
  roleguidlist_.Clear();
  roletypelist_.Clear();
  playernamelist_.Clear();
  rolelevellist_.Clear();
  modelvisualid_.Clear();
  weaponid_.Clear();
  weaponeffectgem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_LOGIN_RET::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_validateresult;
        break;
      }

      // required int32 validateresult = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_validateresult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &validateresult_)));
          set_has_validateresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_userid;
        break;
      }

      // required string userid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_oid;
        break;
      }

      // required string oid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_oid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_oid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->oid().data(), this->oid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_accesstoken;
        break;
      }

      // required string accesstoken = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_accesstoken:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accesstoken()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->accesstoken().data(), this->accesstoken().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_rapidvalidatecode;
        break;
      }

      // required int32 rapidvalidatecode = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rapidvalidatecode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rapidvalidatecode_)));
          set_has_rapidvalidatecode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_roleGUIDList;
        break;
      }

      // repeated uint64 roleGUIDList = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleGUIDList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 56, input, this->mutable_roleguidlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_roleguidlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_roleGUIDList;
        if (input->ExpectTag(64)) goto parse_roleTypeList;
        break;
      }

      // repeated int32 roleTypeList = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleTypeList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_roletypelist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_roletypelist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_roleTypeList;
        if (input->ExpectTag(74)) goto parse_playerNameList;
        break;
      }

      // repeated string playerNameList = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerNameList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_playernamelist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playernamelist(this->playernamelist_size() - 1).data(),
            this->playernamelist(this->playernamelist_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_playerNameList;
        if (input->ExpectTag(80)) goto parse_roleLevelList;
        break;
      }

      // repeated int32 roleLevelList = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleLevelList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_rolelevellist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_rolelevellist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_roleLevelList;
        if (input->ExpectTag(88)) goto parse_ModelVisualID;
        break;
      }

      // repeated int32 ModelVisualID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ModelVisualID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 88, input, this->mutable_modelvisualid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_modelvisualid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_ModelVisualID;
        if (input->ExpectTag(96)) goto parse_WeaponID;
        break;
      }

      // repeated int32 WeaponID = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WeaponID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 96, input, this->mutable_weaponid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_weaponid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_WeaponID;
        if (input->ExpectTag(104)) goto parse_WeaponEffectGem;
        break;
      }

      // repeated int32 WeaponEffectGem = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WeaponEffectGem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 104, input, this->mutable_weaponeffectgem())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_weaponeffectgem())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_WeaponEffectGem;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_LOGIN_RET::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required int32 validateresult = 2;
  if (has_validateresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->validateresult(), output);
  }

  // required string userid = 3;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->userid(), output);
  }

  // required string oid = 4;
  if (has_oid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->oid().data(), this->oid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->oid(), output);
  }

  // required string accesstoken = 5;
  if (has_accesstoken()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accesstoken().data(), this->accesstoken().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->accesstoken(), output);
  }

  // required int32 rapidvalidatecode = 6;
  if (has_rapidvalidatecode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->rapidvalidatecode(), output);
  }

  // repeated uint64 roleGUIDList = 7;
  for (int i = 0; i < this->roleguidlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      7, this->roleguidlist(i), output);
  }

  // repeated int32 roleTypeList = 8;
  for (int i = 0; i < this->roletypelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->roletypelist(i), output);
  }

  // repeated string playerNameList = 9;
  for (int i = 0; i < this->playernamelist_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->playernamelist(i).data(), this->playernamelist(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->playernamelist(i), output);
  }

  // repeated int32 roleLevelList = 10;
  for (int i = 0; i < this->rolelevellist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->rolelevellist(i), output);
  }

  // repeated int32 ModelVisualID = 11;
  for (int i = 0; i < this->modelvisualid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      11, this->modelvisualid(i), output);
  }

  // repeated int32 WeaponID = 12;
  for (int i = 0; i < this->weaponid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      12, this->weaponid(i), output);
  }

  // repeated int32 WeaponEffectGem = 13;
  for (int i = 0; i < this->weaponeffectgem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      13, this->weaponeffectgem(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_LOGIN_RET::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required int32 validateresult = 2;
  if (has_validateresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->validateresult(), target);
  }

  // required string userid = 3;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->userid(), target);
  }

  // required string oid = 4;
  if (has_oid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->oid().data(), this->oid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->oid(), target);
  }

  // required string accesstoken = 5;
  if (has_accesstoken()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accesstoken().data(), this->accesstoken().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->accesstoken(), target);
  }

  // required int32 rapidvalidatecode = 6;
  if (has_rapidvalidatecode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->rapidvalidatecode(), target);
  }

  // repeated uint64 roleGUIDList = 7;
  for (int i = 0; i < this->roleguidlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(7, this->roleguidlist(i), target);
  }

  // repeated int32 roleTypeList = 8;
  for (int i = 0; i < this->roletypelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->roletypelist(i), target);
  }

  // repeated string playerNameList = 9;
  for (int i = 0; i < this->playernamelist_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playernamelist(i).data(), this->playernamelist(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(9, this->playernamelist(i), target);
  }

  // repeated int32 roleLevelList = 10;
  for (int i = 0; i < this->rolelevellist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->rolelevellist(i), target);
  }

  // repeated int32 ModelVisualID = 11;
  for (int i = 0; i < this->modelvisualid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(11, this->modelvisualid(i), target);
  }

  // repeated int32 WeaponID = 12;
  for (int i = 0; i < this->weaponid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(12, this->weaponid(i), target);
  }

  // repeated int32 WeaponEffectGem = 13;
  for (int i = 0; i < this->weaponeffectgem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(13, this->weaponeffectgem(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_LOGIN_RET::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required int32 validateresult = 2;
    if (has_validateresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->validateresult());
    }

    // required string userid = 3;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

    // required string oid = 4;
    if (has_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->oid());
    }

    // required string accesstoken = 5;
    if (has_accesstoken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accesstoken());
    }

    // required int32 rapidvalidatecode = 6;
    if (has_rapidvalidatecode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rapidvalidatecode());
    }

  }
  // repeated uint64 roleGUIDList = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->roleguidlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->roleguidlist(i));
    }
    total_size += 1 * this->roleguidlist_size() + data_size;
  }

  // repeated int32 roleTypeList = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->roletypelist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->roletypelist(i));
    }
    total_size += 1 * this->roletypelist_size() + data_size;
  }

  // repeated string playerNameList = 9;
  total_size += 1 * this->playernamelist_size();
  for (int i = 0; i < this->playernamelist_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->playernamelist(i));
  }

  // repeated int32 roleLevelList = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->rolelevellist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->rolelevellist(i));
    }
    total_size += 1 * this->rolelevellist_size() + data_size;
  }

  // repeated int32 ModelVisualID = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->modelvisualid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->modelvisualid(i));
    }
    total_size += 1 * this->modelvisualid_size() + data_size;
  }

  // repeated int32 WeaponID = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->weaponid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->weaponid(i));
    }
    total_size += 1 * this->weaponid_size() + data_size;
  }

  // repeated int32 WeaponEffectGem = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->weaponeffectgem_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->weaponeffectgem(i));
    }
    total_size += 1 * this->weaponeffectgem_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_LOGIN_RET::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_LOGIN_RET* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_LOGIN_RET*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_LOGIN_RET::MergeFrom(const GC_LOGIN_RET& from) {
  GOOGLE_CHECK_NE(&from, this);
  roleguidlist_.MergeFrom(from.roleguidlist_);
  roletypelist_.MergeFrom(from.roletypelist_);
  playernamelist_.MergeFrom(from.playernamelist_);
  rolelevellist_.MergeFrom(from.rolelevellist_);
  modelvisualid_.MergeFrom(from.modelvisualid_);
  weaponid_.MergeFrom(from.weaponid_);
  weaponeffectgem_.MergeFrom(from.weaponeffectgem_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_validateresult()) {
      set_validateresult(from.validateresult());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_oid()) {
      set_oid(from.oid());
    }
    if (from.has_accesstoken()) {
      set_accesstoken(from.accesstoken());
    }
    if (from.has_rapidvalidatecode()) {
      set_rapidvalidatecode(from.rapidvalidatecode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_LOGIN_RET::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_LOGIN_RET::CopyFrom(const GC_LOGIN_RET& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_LOGIN_RET::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void GC_LOGIN_RET::Swap(GC_LOGIN_RET* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(validateresult_, other->validateresult_);
    std::swap(userid_, other->userid_);
    std::swap(oid_, other->oid_);
    std::swap(accesstoken_, other->accesstoken_);
    std::swap(rapidvalidatecode_, other->rapidvalidatecode_);
    roleguidlist_.Swap(&other->roleguidlist_);
    roletypelist_.Swap(&other->roletypelist_);
    playernamelist_.Swap(&other->playernamelist_);
    rolelevellist_.Swap(&other->rolelevellist_);
    modelvisualid_.Swap(&other->modelvisualid_);
    weaponid_.Swap(&other->weaponid_);
    weaponeffectgem_.Swap(&other->weaponeffectgem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_LOGIN_RET::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_LOGIN_RET_descriptor_;
  metadata.reflection = GC_LOGIN_RET_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GC_LOGIN_QUEUE_STATUS_QUEUESTATUS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_LOGIN_QUEUE_STATUS_QUEUESTATUS_descriptor_;
}
bool GC_LOGIN_QUEUE_STATUS_QUEUESTATUS_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GC_LOGIN_QUEUE_STATUS_QUEUESTATUS GC_LOGIN_QUEUE_STATUS::BEGINQUEUE;
const GC_LOGIN_QUEUE_STATUS_QUEUESTATUS GC_LOGIN_QUEUE_STATUS::QUEUING;
const GC_LOGIN_QUEUE_STATUS_QUEUESTATUS GC_LOGIN_QUEUE_STATUS::ENDQUEUE;
const GC_LOGIN_QUEUE_STATUS_QUEUESTATUS GC_LOGIN_QUEUE_STATUS::QUEUESTATUS_MIN;
const GC_LOGIN_QUEUE_STATUS_QUEUESTATUS GC_LOGIN_QUEUE_STATUS::QUEUESTATUS_MAX;
const int GC_LOGIN_QUEUE_STATUS::QUEUESTATUS_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GC_LOGIN_QUEUE_STATUS::kStatusFieldNumber;
const int GC_LOGIN_QUEUE_STATUS::kIndexFieldNumber;
#endif  // !_MSC_VER

GC_LOGIN_QUEUE_STATUS::GC_LOGIN_QUEUE_STATUS()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_LOGIN_QUEUE_STATUS::InitAsDefaultInstance() {
}

GC_LOGIN_QUEUE_STATUS::GC_LOGIN_QUEUE_STATUS(const GC_LOGIN_QUEUE_STATUS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_LOGIN_QUEUE_STATUS::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_LOGIN_QUEUE_STATUS::~GC_LOGIN_QUEUE_STATUS() {
  SharedDtor();
}

void GC_LOGIN_QUEUE_STATUS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_LOGIN_QUEUE_STATUS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_LOGIN_QUEUE_STATUS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_LOGIN_QUEUE_STATUS_descriptor_;
}

const GC_LOGIN_QUEUE_STATUS& GC_LOGIN_QUEUE_STATUS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_LOGIN_QUEUE_STATUS* GC_LOGIN_QUEUE_STATUS::default_instance_ = NULL;

GC_LOGIN_QUEUE_STATUS* GC_LOGIN_QUEUE_STATUS::New() const {
  return new GC_LOGIN_QUEUE_STATUS;
}

void GC_LOGIN_QUEUE_STATUS::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0;
    index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_LOGIN_QUEUE_STATUS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // required int32 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_LOGIN_QUEUE_STATUS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  // required int32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_LOGIN_QUEUE_STATUS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  // required int32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_LOGIN_QUEUE_STATUS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // required int32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_LOGIN_QUEUE_STATUS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_LOGIN_QUEUE_STATUS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_LOGIN_QUEUE_STATUS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_LOGIN_QUEUE_STATUS::MergeFrom(const GC_LOGIN_QUEUE_STATUS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_LOGIN_QUEUE_STATUS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_LOGIN_QUEUE_STATUS::CopyFrom(const GC_LOGIN_QUEUE_STATUS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_LOGIN_QUEUE_STATUS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GC_LOGIN_QUEUE_STATUS::Swap(GC_LOGIN_QUEUE_STATUS* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_LOGIN_QUEUE_STATUS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_LOGIN_QUEUE_STATUS_descriptor_;
  metadata.reflection = GC_LOGIN_QUEUE_STATUS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CG_CREATEROLE::kTypeFieldNumber;
const int CG_CREATEROLE::kNameFieldNumber;
#endif  // !_MSC_VER

CG_CREATEROLE::CG_CREATEROLE()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CG_CREATEROLE::InitAsDefaultInstance() {
}

CG_CREATEROLE::CG_CREATEROLE(const CG_CREATEROLE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CG_CREATEROLE::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CG_CREATEROLE::~CG_CREATEROLE() {
  SharedDtor();
}

void CG_CREATEROLE::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CG_CREATEROLE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CG_CREATEROLE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CG_CREATEROLE_descriptor_;
}

const CG_CREATEROLE& CG_CREATEROLE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

CG_CREATEROLE* CG_CREATEROLE::default_instance_ = NULL;

CG_CREATEROLE* CG_CREATEROLE::New() const {
  return new CG_CREATEROLE;
}

void CG_CREATEROLE::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CG_CREATEROLE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CG_CREATEROLE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CG_CREATEROLE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CG_CREATEROLE::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CG_CREATEROLE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CG_CREATEROLE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CG_CREATEROLE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CG_CREATEROLE::MergeFrom(const CG_CREATEROLE& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CG_CREATEROLE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CG_CREATEROLE::CopyFrom(const CG_CREATEROLE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CG_CREATEROLE::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CG_CREATEROLE::Swap(CG_CREATEROLE* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CG_CREATEROLE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CG_CREATEROLE_descriptor_;
  metadata.reflection = CG_CREATEROLE_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GC_CREATEROLE_RET_CREATEROLE_RESULT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_CREATEROLE_RET_CREATEROLE_RESULT_descriptor_;
}
bool GC_CREATEROLE_RET_CREATEROLE_RESULT_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GC_CREATEROLE_RET_CREATEROLE_RESULT GC_CREATEROLE_RET::CREATEROLE_SUCCESS;
const GC_CREATEROLE_RET_CREATEROLE_RESULT GC_CREATEROLE_RET::CREATEROLE_FAIL;
const GC_CREATEROLE_RET_CREATEROLE_RESULT GC_CREATEROLE_RET::CREATEROLE_FAIL_NAMEEXIST;
const GC_CREATEROLE_RET_CREATEROLE_RESULT GC_CREATEROLE_RET::CREATEROLE_FAIL_NAMESCREENING;
const GC_CREATEROLE_RET_CREATEROLE_RESULT GC_CREATEROLE_RET::CREATEROLE_FAIL_LONGNAME;
const GC_CREATEROLE_RET_CREATEROLE_RESULT GC_CREATEROLE_RET::CREATEROLE_RESULT_MIN;
const GC_CREATEROLE_RET_CREATEROLE_RESULT GC_CREATEROLE_RET::CREATEROLE_RESULT_MAX;
const int GC_CREATEROLE_RET::CREATEROLE_RESULT_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GC_CREATEROLE_RET::kResultFieldNumber;
const int GC_CREATEROLE_RET::kProfessionFieldNumber;
const int GC_CREATEROLE_RET::kPlayerGuidFieldNumber;
const int GC_CREATEROLE_RET::kPlayerNameFieldNumber;
#endif  // !_MSC_VER

GC_CREATEROLE_RET::GC_CREATEROLE_RET()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_CREATEROLE_RET::InitAsDefaultInstance() {
}

GC_CREATEROLE_RET::GC_CREATEROLE_RET(const GC_CREATEROLE_RET& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_CREATEROLE_RET::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  profession_ = 0;
  playerguid_ = GOOGLE_ULONGLONG(0);
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_CREATEROLE_RET::~GC_CREATEROLE_RET() {
  SharedDtor();
}

void GC_CREATEROLE_RET::SharedDtor() {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (this != default_instance_) {
  }
}

void GC_CREATEROLE_RET::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_CREATEROLE_RET::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_CREATEROLE_RET_descriptor_;
}

const GC_CREATEROLE_RET& GC_CREATEROLE_RET::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_CREATEROLE_RET* GC_CREATEROLE_RET::default_instance_ = NULL;

GC_CREATEROLE_RET* GC_CREATEROLE_RET::New() const {
  return new GC_CREATEROLE_RET;
}

void GC_CREATEROLE_RET::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    profession_ = 0;
    playerguid_ = GOOGLE_ULONGLONG(0);
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::kEmptyString) {
        playername_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_CREATEROLE_RET::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_profession;
        break;
      }

      // required int32 profession = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &profession_)));
          set_has_profession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_playerGuid;
        break;
      }

      // required uint64 playerGuid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerGuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerguid_)));
          set_has_playerguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_playerName;
        break;
      }

      // required string playerName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_CREATEROLE_RET::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required int32 profession = 2;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->profession(), output);
  }

  // required uint64 playerGuid = 3;
  if (has_playerguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->playerguid(), output);
  }

  // required string playerName = 4;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->playername(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_CREATEROLE_RET::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required int32 profession = 2;
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->profession(), target);
  }

  // required uint64 playerGuid = 3;
  if (has_playerguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->playerguid(), target);
  }

  // required string playerName = 4;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->playername(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_CREATEROLE_RET::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required int32 profession = 2;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->profession());
    }

    // required uint64 playerGuid = 3;
    if (has_playerguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerguid());
    }

    // required string playerName = 4;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_CREATEROLE_RET::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_CREATEROLE_RET* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_CREATEROLE_RET*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_CREATEROLE_RET::MergeFrom(const GC_CREATEROLE_RET& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_playerguid()) {
      set_playerguid(from.playerguid());
    }
    if (from.has_playername()) {
      set_playername(from.playername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_CREATEROLE_RET::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_CREATEROLE_RET::CopyFrom(const GC_CREATEROLE_RET& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_CREATEROLE_RET::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void GC_CREATEROLE_RET::Swap(GC_CREATEROLE_RET* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(profession_, other->profession_);
    std::swap(playerguid_, other->playerguid_);
    std::swap(playername_, other->playername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_CREATEROLE_RET::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_CREATEROLE_RET_descriptor_;
  metadata.reflection = GC_CREATEROLE_RET_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CG_SELECTROLE::kRoleGUIDFieldNumber;
#endif  // !_MSC_VER

CG_SELECTROLE::CG_SELECTROLE()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CG_SELECTROLE::InitAsDefaultInstance() {
}

CG_SELECTROLE::CG_SELECTROLE(const CG_SELECTROLE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CG_SELECTROLE::SharedCtor() {
  _cached_size_ = 0;
  roleguid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CG_SELECTROLE::~CG_SELECTROLE() {
  SharedDtor();
}

void CG_SELECTROLE::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CG_SELECTROLE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CG_SELECTROLE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CG_SELECTROLE_descriptor_;
}

const CG_SELECTROLE& CG_SELECTROLE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

CG_SELECTROLE* CG_SELECTROLE::default_instance_ = NULL;

CG_SELECTROLE* CG_SELECTROLE::New() const {
  return new CG_SELECTROLE;
}

void CG_SELECTROLE::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleguid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CG_SELECTROLE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 roleGUID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleguid_)));
          set_has_roleguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CG_SELECTROLE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 roleGUID = 1;
  if (has_roleguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roleguid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CG_SELECTROLE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 roleGUID = 1;
  if (has_roleguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roleguid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CG_SELECTROLE::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 roleGUID = 1;
    if (has_roleguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleguid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CG_SELECTROLE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CG_SELECTROLE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CG_SELECTROLE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CG_SELECTROLE::MergeFrom(const CG_SELECTROLE& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleguid()) {
      set_roleguid(from.roleguid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CG_SELECTROLE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CG_SELECTROLE::CopyFrom(const CG_SELECTROLE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CG_SELECTROLE::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CG_SELECTROLE::Swap(CG_SELECTROLE* other) {
  if (other != this) {
    std::swap(roleguid_, other->roleguid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CG_SELECTROLE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CG_SELECTROLE_descriptor_;
  metadata.reflection = CG_SELECTROLE_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GC_SELECTROLE_RET_SELECTROLE_RESULT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_SELECTROLE_RET_SELECTROLE_RESULT_descriptor_;
}
bool GC_SELECTROLE_RET_SELECTROLE_RESULT_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GC_SELECTROLE_RET_SELECTROLE_RESULT GC_SELECTROLE_RET::SELECTROLE_SUCCESS;
const GC_SELECTROLE_RET_SELECTROLE_RESULT GC_SELECTROLE_RET::SELECTROLE_FAIL;
const GC_SELECTROLE_RET_SELECTROLE_RESULT GC_SELECTROLE_RET::SELECTROLE_RESULT_MIN;
const GC_SELECTROLE_RET_SELECTROLE_RESULT GC_SELECTROLE_RET::SELECTROLE_RESULT_MAX;
const int GC_SELECTROLE_RET::SELECTROLE_RESULT_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GC_SELECTROLE_RET::kResultFieldNumber;
const int GC_SELECTROLE_RET::kPlayerGuidFieldNumber;
#endif  // !_MSC_VER

GC_SELECTROLE_RET::GC_SELECTROLE_RET()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_SELECTROLE_RET::InitAsDefaultInstance() {
}

GC_SELECTROLE_RET::GC_SELECTROLE_RET(const GC_SELECTROLE_RET& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_SELECTROLE_RET::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  playerguid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_SELECTROLE_RET::~GC_SELECTROLE_RET() {
  SharedDtor();
}

void GC_SELECTROLE_RET::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_SELECTROLE_RET::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_SELECTROLE_RET::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_SELECTROLE_RET_descriptor_;
}

const GC_SELECTROLE_RET& GC_SELECTROLE_RET::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_SELECTROLE_RET* GC_SELECTROLE_RET::default_instance_ = NULL;

GC_SELECTROLE_RET* GC_SELECTROLE_RET::New() const {
  return new GC_SELECTROLE_RET;
}

void GC_SELECTROLE_RET::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    playerguid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_SELECTROLE_RET::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerGuid;
        break;
      }

      // required uint64 playerGuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerGuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerguid_)));
          set_has_playerguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_SELECTROLE_RET::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required uint64 playerGuid = 2;
  if (has_playerguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->playerguid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_SELECTROLE_RET::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required uint64 playerGuid = 2;
  if (has_playerguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->playerguid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_SELECTROLE_RET::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required uint64 playerGuid = 2;
    if (has_playerguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerguid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_SELECTROLE_RET::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_SELECTROLE_RET* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_SELECTROLE_RET*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_SELECTROLE_RET::MergeFrom(const GC_SELECTROLE_RET& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_playerguid()) {
      set_playerguid(from.playerguid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_SELECTROLE_RET::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_SELECTROLE_RET::CopyFrom(const GC_SELECTROLE_RET& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_SELECTROLE_RET::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GC_SELECTROLE_RET::Swap(GC_SELECTROLE_RET* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(playerguid_, other->playerguid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_SELECTROLE_RET::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_SELECTROLE_RET_descriptor_;
  metadata.reflection = GC_SELECTROLE_RET_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CG_REQ_RANDOMNAME::kNoneFieldNumber;
#endif  // !_MSC_VER

CG_REQ_RANDOMNAME::CG_REQ_RANDOMNAME()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CG_REQ_RANDOMNAME::InitAsDefaultInstance() {
}

CG_REQ_RANDOMNAME::CG_REQ_RANDOMNAME(const CG_REQ_RANDOMNAME& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CG_REQ_RANDOMNAME::SharedCtor() {
  _cached_size_ = 0;
  none_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CG_REQ_RANDOMNAME::~CG_REQ_RANDOMNAME() {
  SharedDtor();
}

void CG_REQ_RANDOMNAME::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CG_REQ_RANDOMNAME::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CG_REQ_RANDOMNAME::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CG_REQ_RANDOMNAME_descriptor_;
}

const CG_REQ_RANDOMNAME& CG_REQ_RANDOMNAME::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

CG_REQ_RANDOMNAME* CG_REQ_RANDOMNAME::default_instance_ = NULL;

CG_REQ_RANDOMNAME* CG_REQ_RANDOMNAME::New() const {
  return new CG_REQ_RANDOMNAME;
}

void CG_REQ_RANDOMNAME::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    none_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CG_REQ_RANDOMNAME::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 none = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &none_)));
          set_has_none();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CG_REQ_RANDOMNAME::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 none = 1;
  if (has_none()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->none(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CG_REQ_RANDOMNAME::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 none = 1;
  if (has_none()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->none(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CG_REQ_RANDOMNAME::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 none = 1;
    if (has_none()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->none());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CG_REQ_RANDOMNAME::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CG_REQ_RANDOMNAME* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CG_REQ_RANDOMNAME*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CG_REQ_RANDOMNAME::MergeFrom(const CG_REQ_RANDOMNAME& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_none()) {
      set_none(from.none());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CG_REQ_RANDOMNAME::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CG_REQ_RANDOMNAME::CopyFrom(const CG_REQ_RANDOMNAME& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CG_REQ_RANDOMNAME::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CG_REQ_RANDOMNAME::Swap(CG_REQ_RANDOMNAME* other) {
  if (other != this) {
    std::swap(none_, other->none_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CG_REQ_RANDOMNAME::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CG_REQ_RANDOMNAME_descriptor_;
  metadata.reflection = CG_REQ_RANDOMNAME_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_RET_RANDOMNAME::kNamesFieldNumber;
#endif  // !_MSC_VER

GC_RET_RANDOMNAME::GC_RET_RANDOMNAME()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_RET_RANDOMNAME::InitAsDefaultInstance() {
}

GC_RET_RANDOMNAME::GC_RET_RANDOMNAME(const GC_RET_RANDOMNAME& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_RET_RANDOMNAME::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_RET_RANDOMNAME::~GC_RET_RANDOMNAME() {
  SharedDtor();
}

void GC_RET_RANDOMNAME::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_RET_RANDOMNAME::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_RET_RANDOMNAME::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_RET_RANDOMNAME_descriptor_;
}

const GC_RET_RANDOMNAME& GC_RET_RANDOMNAME::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_RET_RANDOMNAME* GC_RET_RANDOMNAME::default_instance_ = NULL;

GC_RET_RANDOMNAME* GC_RET_RANDOMNAME::New() const {
  return new GC_RET_RANDOMNAME;
}

void GC_RET_RANDOMNAME::Clear() {
  names_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_RET_RANDOMNAME::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string names = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_names()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->names(this->names_size() - 1).data(),
            this->names(this->names_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_names;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_RET_RANDOMNAME::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string names = 1;
  for (int i = 0; i < this->names_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->names(i).data(), this->names(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->names(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_RET_RANDOMNAME::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string names = 1;
  for (int i = 0; i < this->names_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->names(i).data(), this->names(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->names(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_RET_RANDOMNAME::ByteSize() const {
  int total_size = 0;

  // repeated string names = 1;
  total_size += 1 * this->names_size();
  for (int i = 0; i < this->names_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->names(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_RET_RANDOMNAME::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_RET_RANDOMNAME* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_RET_RANDOMNAME*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_RET_RANDOMNAME::MergeFrom(const GC_RET_RANDOMNAME& from) {
  GOOGLE_CHECK_NE(&from, this);
  names_.MergeFrom(from.names_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_RET_RANDOMNAME::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_RET_RANDOMNAME::CopyFrom(const GC_RET_RANDOMNAME& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_RET_RANDOMNAME::IsInitialized() const {

  return true;
}

void GC_RET_RANDOMNAME::Swap(GC_RET_RANDOMNAME* other) {
  if (other != this) {
    names_.Swap(&other->names_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_RET_RANDOMNAME::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_RET_RANDOMNAME_descriptor_;
  metadata.reflection = GC_RET_RANDOMNAME_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CG_REQ_CHANGE_SCENE_CHANGETYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CG_REQ_CHANGE_SCENE_CHANGETYPE_descriptor_;
}
bool CG_REQ_CHANGE_SCENE_CHANGETYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CG_REQ_CHANGE_SCENE_CHANGETYPE CG_REQ_CHANGE_SCENE::TELEPORT;
const CG_REQ_CHANGE_SCENE_CHANGETYPE CG_REQ_CHANGE_SCENE::WORLDMAP;
const CG_REQ_CHANGE_SCENE_CHANGETYPE CG_REQ_CHANGE_SCENE::TRAIL;
const CG_REQ_CHANGE_SCENE_CHANGETYPE CG_REQ_CHANGE_SCENE::POINT;
const CG_REQ_CHANGE_SCENE_CHANGETYPE CG_REQ_CHANGE_SCENE::CHANGETYPE_MIN;
const CG_REQ_CHANGE_SCENE_CHANGETYPE CG_REQ_CHANGE_SCENE::CHANGETYPE_MAX;
const int CG_REQ_CHANGE_SCENE::CHANGETYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CG_REQ_CHANGE_SCENE::kCtypeFieldNumber;
const int CG_REQ_CHANGE_SCENE::kTeleportidFieldNumber;
const int CG_REQ_CHANGE_SCENE::kSceneclassidFieldNumber;
const int CG_REQ_CHANGE_SCENE::kSceneinstidFieldNumber;
const int CG_REQ_CHANGE_SCENE::kPosXFieldNumber;
const int CG_REQ_CHANGE_SCENE::kPosZFieldNumber;
#endif  // !_MSC_VER

CG_REQ_CHANGE_SCENE::CG_REQ_CHANGE_SCENE()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CG_REQ_CHANGE_SCENE::InitAsDefaultInstance() {
}

CG_REQ_CHANGE_SCENE::CG_REQ_CHANGE_SCENE(const CG_REQ_CHANGE_SCENE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CG_REQ_CHANGE_SCENE::SharedCtor() {
  _cached_size_ = 0;
  ctype_ = 0;
  teleportid_ = 0;
  sceneclassid_ = 0;
  sceneinstid_ = 0;
  posx_ = 0;
  posz_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CG_REQ_CHANGE_SCENE::~CG_REQ_CHANGE_SCENE() {
  SharedDtor();
}

void CG_REQ_CHANGE_SCENE::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CG_REQ_CHANGE_SCENE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CG_REQ_CHANGE_SCENE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CG_REQ_CHANGE_SCENE_descriptor_;
}

const CG_REQ_CHANGE_SCENE& CG_REQ_CHANGE_SCENE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

CG_REQ_CHANGE_SCENE* CG_REQ_CHANGE_SCENE::default_instance_ = NULL;

CG_REQ_CHANGE_SCENE* CG_REQ_CHANGE_SCENE::New() const {
  return new CG_REQ_CHANGE_SCENE;
}

void CG_REQ_CHANGE_SCENE::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ctype_ = 0;
    teleportid_ = 0;
    sceneclassid_ = 0;
    sceneinstid_ = 0;
    posx_ = 0;
    posz_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CG_REQ_CHANGE_SCENE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ctype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ctype_)));
          set_has_ctype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_teleportid;
        break;
      }

      // required int32 teleportid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teleportid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teleportid_)));
          set_has_teleportid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sceneclassid;
        break;
      }

      // required int32 sceneclassid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneclassid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneclassid_)));
          set_has_sceneclassid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sceneinstid;
        break;
      }

      // required int32 sceneinstid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneinstid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneinstid_)));
          set_has_sceneinstid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_posX;
        break;
      }

      // required int32 posX = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_posX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_posZ;
        break;
      }

      // required int32 posZ = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_posZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posz_)));
          set_has_posz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CG_REQ_CHANGE_SCENE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ctype = 1;
  if (has_ctype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ctype(), output);
  }

  // required int32 teleportid = 2;
  if (has_teleportid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->teleportid(), output);
  }

  // required int32 sceneclassid = 3;
  if (has_sceneclassid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sceneclassid(), output);
  }

  // required int32 sceneinstid = 4;
  if (has_sceneinstid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sceneinstid(), output);
  }

  // required int32 posX = 5;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->posx(), output);
  }

  // required int32 posZ = 6;
  if (has_posz()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->posz(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CG_REQ_CHANGE_SCENE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ctype = 1;
  if (has_ctype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ctype(), target);
  }

  // required int32 teleportid = 2;
  if (has_teleportid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->teleportid(), target);
  }

  // required int32 sceneclassid = 3;
  if (has_sceneclassid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sceneclassid(), target);
  }

  // required int32 sceneinstid = 4;
  if (has_sceneinstid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sceneinstid(), target);
  }

  // required int32 posX = 5;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->posx(), target);
  }

  // required int32 posZ = 6;
  if (has_posz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->posz(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CG_REQ_CHANGE_SCENE::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ctype = 1;
    if (has_ctype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ctype());
    }

    // required int32 teleportid = 2;
    if (has_teleportid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teleportid());
    }

    // required int32 sceneclassid = 3;
    if (has_sceneclassid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneclassid());
    }

    // required int32 sceneinstid = 4;
    if (has_sceneinstid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneinstid());
    }

    // required int32 posX = 5;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posx());
    }

    // required int32 posZ = 6;
    if (has_posz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posz());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CG_REQ_CHANGE_SCENE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CG_REQ_CHANGE_SCENE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CG_REQ_CHANGE_SCENE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CG_REQ_CHANGE_SCENE::MergeFrom(const CG_REQ_CHANGE_SCENE& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ctype()) {
      set_ctype(from.ctype());
    }
    if (from.has_teleportid()) {
      set_teleportid(from.teleportid());
    }
    if (from.has_sceneclassid()) {
      set_sceneclassid(from.sceneclassid());
    }
    if (from.has_sceneinstid()) {
      set_sceneinstid(from.sceneinstid());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posz()) {
      set_posz(from.posz());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CG_REQ_CHANGE_SCENE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CG_REQ_CHANGE_SCENE::CopyFrom(const CG_REQ_CHANGE_SCENE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CG_REQ_CHANGE_SCENE::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void CG_REQ_CHANGE_SCENE::Swap(CG_REQ_CHANGE_SCENE* other) {
  if (other != this) {
    std::swap(ctype_, other->ctype_);
    std::swap(teleportid_, other->teleportid_);
    std::swap(sceneclassid_, other->sceneclassid_);
    std::swap(sceneinstid_, other->sceneinstid_);
    std::swap(posx_, other->posx_);
    std::swap(posz_, other->posz_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CG_REQ_CHANGE_SCENE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CG_REQ_CHANGE_SCENE_descriptor_;
  metadata.reflection = CG_REQ_CHANGE_SCENE_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_ENTER_SCENE::kSceneclassFieldNumber;
const int GC_ENTER_SCENE::kSceneinstFieldNumber;
const int GC_ENTER_SCENE::kMainplayerserveridFieldNumber;
const int GC_ENTER_SCENE::kPosXFieldNumber;
const int GC_ENTER_SCENE::kPosZFieldNumber;
#endif  // !_MSC_VER

GC_ENTER_SCENE::GC_ENTER_SCENE()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_ENTER_SCENE::InitAsDefaultInstance() {
}

GC_ENTER_SCENE::GC_ENTER_SCENE(const GC_ENTER_SCENE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_ENTER_SCENE::SharedCtor() {
  _cached_size_ = 0;
  sceneclass_ = 0;
  sceneinst_ = 0;
  mainplayerserverid_ = 0;
  posx_ = 0;
  posz_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_ENTER_SCENE::~GC_ENTER_SCENE() {
  SharedDtor();
}

void GC_ENTER_SCENE::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_ENTER_SCENE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_ENTER_SCENE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_ENTER_SCENE_descriptor_;
}

const GC_ENTER_SCENE& GC_ENTER_SCENE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_ENTER_SCENE* GC_ENTER_SCENE::default_instance_ = NULL;

GC_ENTER_SCENE* GC_ENTER_SCENE::New() const {
  return new GC_ENTER_SCENE;
}

void GC_ENTER_SCENE::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sceneclass_ = 0;
    sceneinst_ = 0;
    mainplayerserverid_ = 0;
    posx_ = 0;
    posz_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_ENTER_SCENE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sceneclass = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneclass_)));
          set_has_sceneclass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sceneinst;
        break;
      }

      // required int32 sceneinst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneinst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneinst_)));
          set_has_sceneinst();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mainplayerserverid;
        break;
      }

      // required int32 mainplayerserverid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mainplayerserverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mainplayerserverid_)));
          set_has_mainplayerserverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_posX;
        break;
      }

      // required int32 posX = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_posX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_posZ;
        break;
      }

      // required int32 posZ = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_posZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posz_)));
          set_has_posz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_ENTER_SCENE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 sceneclass = 1;
  if (has_sceneclass()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sceneclass(), output);
  }

  // required int32 sceneinst = 2;
  if (has_sceneinst()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sceneinst(), output);
  }

  // required int32 mainplayerserverid = 3;
  if (has_mainplayerserverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mainplayerserverid(), output);
  }

  // required int32 posX = 4;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->posx(), output);
  }

  // required int32 posZ = 5;
  if (has_posz()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->posz(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_ENTER_SCENE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 sceneclass = 1;
  if (has_sceneclass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sceneclass(), target);
  }

  // required int32 sceneinst = 2;
  if (has_sceneinst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sceneinst(), target);
  }

  // required int32 mainplayerserverid = 3;
  if (has_mainplayerserverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mainplayerserverid(), target);
  }

  // required int32 posX = 4;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->posx(), target);
  }

  // required int32 posZ = 5;
  if (has_posz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->posz(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_ENTER_SCENE::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 sceneclass = 1;
    if (has_sceneclass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneclass());
    }

    // required int32 sceneinst = 2;
    if (has_sceneinst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneinst());
    }

    // required int32 mainplayerserverid = 3;
    if (has_mainplayerserverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mainplayerserverid());
    }

    // required int32 posX = 4;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posx());
    }

    // required int32 posZ = 5;
    if (has_posz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posz());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_ENTER_SCENE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_ENTER_SCENE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_ENTER_SCENE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_ENTER_SCENE::MergeFrom(const GC_ENTER_SCENE& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sceneclass()) {
      set_sceneclass(from.sceneclass());
    }
    if (from.has_sceneinst()) {
      set_sceneinst(from.sceneinst());
    }
    if (from.has_mainplayerserverid()) {
      set_mainplayerserverid(from.mainplayerserverid());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posz()) {
      set_posz(from.posz());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_ENTER_SCENE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_ENTER_SCENE::CopyFrom(const GC_ENTER_SCENE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_ENTER_SCENE::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void GC_ENTER_SCENE::Swap(GC_ENTER_SCENE* other) {
  if (other != this) {
    std::swap(sceneclass_, other->sceneclass_);
    std::swap(sceneinst_, other->sceneinst_);
    std::swap(mainplayerserverid_, other->mainplayerserverid_);
    std::swap(posx_, other->posx_);
    std::swap(posz_, other->posz_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_ENTER_SCENE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_ENTER_SCENE_descriptor_;
  metadata.reflection = GC_ENTER_SCENE_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CG_ENTER_SCENE_OK::kIsOKFieldNumber;
#endif  // !_MSC_VER

CG_ENTER_SCENE_OK::CG_ENTER_SCENE_OK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CG_ENTER_SCENE_OK::InitAsDefaultInstance() {
}

CG_ENTER_SCENE_OK::CG_ENTER_SCENE_OK(const CG_ENTER_SCENE_OK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CG_ENTER_SCENE_OK::SharedCtor() {
  _cached_size_ = 0;
  isok_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CG_ENTER_SCENE_OK::~CG_ENTER_SCENE_OK() {
  SharedDtor();
}

void CG_ENTER_SCENE_OK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CG_ENTER_SCENE_OK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CG_ENTER_SCENE_OK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CG_ENTER_SCENE_OK_descriptor_;
}

const CG_ENTER_SCENE_OK& CG_ENTER_SCENE_OK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

CG_ENTER_SCENE_OK* CG_ENTER_SCENE_OK::default_instance_ = NULL;

CG_ENTER_SCENE_OK* CG_ENTER_SCENE_OK::New() const {
  return new CG_ENTER_SCENE_OK;
}

void CG_ENTER_SCENE_OK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isok_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CG_ENTER_SCENE_OK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 isOK = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isok_)));
          set_has_isok();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CG_ENTER_SCENE_OK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 isOK = 1;
  if (has_isok()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->isok(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CG_ENTER_SCENE_OK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 isOK = 1;
  if (has_isok()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->isok(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CG_ENTER_SCENE_OK::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 isOK = 1;
    if (has_isok()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isok());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CG_ENTER_SCENE_OK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CG_ENTER_SCENE_OK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CG_ENTER_SCENE_OK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CG_ENTER_SCENE_OK::MergeFrom(const CG_ENTER_SCENE_OK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isok()) {
      set_isok(from.isok());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CG_ENTER_SCENE_OK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CG_ENTER_SCENE_OK::CopyFrom(const CG_ENTER_SCENE_OK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CG_ENTER_SCENE_OK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CG_ENTER_SCENE_OK::Swap(CG_ENTER_SCENE_OK* other) {
  if (other != this) {
    std::swap(isok_, other->isok_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CG_ENTER_SCENE_OK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CG_ENTER_SCENE_OK_descriptor_;
  metadata.reflection = CG_ENTER_SCENE_OK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CG_CONNECTED_HEARTBEAT::kIsresponseFieldNumber;
#endif  // !_MSC_VER

CG_CONNECTED_HEARTBEAT::CG_CONNECTED_HEARTBEAT()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CG_CONNECTED_HEARTBEAT::InitAsDefaultInstance() {
}

CG_CONNECTED_HEARTBEAT::CG_CONNECTED_HEARTBEAT(const CG_CONNECTED_HEARTBEAT& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CG_CONNECTED_HEARTBEAT::SharedCtor() {
  _cached_size_ = 0;
  isresponse_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CG_CONNECTED_HEARTBEAT::~CG_CONNECTED_HEARTBEAT() {
  SharedDtor();
}

void CG_CONNECTED_HEARTBEAT::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CG_CONNECTED_HEARTBEAT::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CG_CONNECTED_HEARTBEAT::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CG_CONNECTED_HEARTBEAT_descriptor_;
}

const CG_CONNECTED_HEARTBEAT& CG_CONNECTED_HEARTBEAT::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

CG_CONNECTED_HEARTBEAT* CG_CONNECTED_HEARTBEAT::default_instance_ = NULL;

CG_CONNECTED_HEARTBEAT* CG_CONNECTED_HEARTBEAT::New() const {
  return new CG_CONNECTED_HEARTBEAT;
}

void CG_CONNECTED_HEARTBEAT::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isresponse_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CG_CONNECTED_HEARTBEAT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 isresponse = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isresponse_)));
          set_has_isresponse();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CG_CONNECTED_HEARTBEAT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 isresponse = 1;
  if (has_isresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->isresponse(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CG_CONNECTED_HEARTBEAT::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 isresponse = 1;
  if (has_isresponse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->isresponse(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CG_CONNECTED_HEARTBEAT::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 isresponse = 1;
    if (has_isresponse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isresponse());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CG_CONNECTED_HEARTBEAT::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CG_CONNECTED_HEARTBEAT* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CG_CONNECTED_HEARTBEAT*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CG_CONNECTED_HEARTBEAT::MergeFrom(const CG_CONNECTED_HEARTBEAT& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isresponse()) {
      set_isresponse(from.isresponse());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CG_CONNECTED_HEARTBEAT::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CG_CONNECTED_HEARTBEAT::CopyFrom(const CG_CONNECTED_HEARTBEAT& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CG_CONNECTED_HEARTBEAT::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CG_CONNECTED_HEARTBEAT::Swap(CG_CONNECTED_HEARTBEAT* other) {
  if (other != this) {
    std::swap(isresponse_, other->isresponse_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CG_CONNECTED_HEARTBEAT::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CG_CONNECTED_HEARTBEAT_descriptor_;
  metadata.reflection = CG_CONNECTED_HEARTBEAT_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_CONNECTED_HEARTBEAT::kServeransitimeFieldNumber;
#endif  // !_MSC_VER

GC_CONNECTED_HEARTBEAT::GC_CONNECTED_HEARTBEAT()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_CONNECTED_HEARTBEAT::InitAsDefaultInstance() {
}

GC_CONNECTED_HEARTBEAT::GC_CONNECTED_HEARTBEAT(const GC_CONNECTED_HEARTBEAT& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_CONNECTED_HEARTBEAT::SharedCtor() {
  _cached_size_ = 0;
  serveransitime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_CONNECTED_HEARTBEAT::~GC_CONNECTED_HEARTBEAT() {
  SharedDtor();
}

void GC_CONNECTED_HEARTBEAT::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_CONNECTED_HEARTBEAT::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_CONNECTED_HEARTBEAT::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_CONNECTED_HEARTBEAT_descriptor_;
}

const GC_CONNECTED_HEARTBEAT& GC_CONNECTED_HEARTBEAT::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_CONNECTED_HEARTBEAT* GC_CONNECTED_HEARTBEAT::default_instance_ = NULL;

GC_CONNECTED_HEARTBEAT* GC_CONNECTED_HEARTBEAT::New() const {
  return new GC_CONNECTED_HEARTBEAT;
}

void GC_CONNECTED_HEARTBEAT::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    serveransitime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_CONNECTED_HEARTBEAT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 serveransitime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serveransitime_)));
          set_has_serveransitime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_CONNECTED_HEARTBEAT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 serveransitime = 1;
  if (has_serveransitime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->serveransitime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_CONNECTED_HEARTBEAT::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 serveransitime = 1;
  if (has_serveransitime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->serveransitime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_CONNECTED_HEARTBEAT::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 serveransitime = 1;
    if (has_serveransitime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serveransitime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_CONNECTED_HEARTBEAT::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_CONNECTED_HEARTBEAT* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_CONNECTED_HEARTBEAT*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_CONNECTED_HEARTBEAT::MergeFrom(const GC_CONNECTED_HEARTBEAT& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serveransitime()) {
      set_serveransitime(from.serveransitime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_CONNECTED_HEARTBEAT::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_CONNECTED_HEARTBEAT::CopyFrom(const GC_CONNECTED_HEARTBEAT& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_CONNECTED_HEARTBEAT::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GC_CONNECTED_HEARTBEAT::Swap(GC_CONNECTED_HEARTBEAT* other) {
  if (other != this) {
    std::swap(serveransitime_, other->serveransitime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_CONNECTED_HEARTBEAT::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_CONNECTED_HEARTBEAT_descriptor_;
  metadata.reflection = GC_CONNECTED_HEARTBEAT_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_NOTICE::kNoticeFieldNumber;
const int GC_NOTICE::kFilterRepeatFieldNumber;
#endif  // !_MSC_VER

GC_NOTICE::GC_NOTICE()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_NOTICE::InitAsDefaultInstance() {
}

GC_NOTICE::GC_NOTICE(const GC_NOTICE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_NOTICE::SharedCtor() {
  _cached_size_ = 0;
  notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filterrepeat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_NOTICE::~GC_NOTICE() {
  SharedDtor();
}

void GC_NOTICE::SharedDtor() {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (this != default_instance_) {
  }
}

void GC_NOTICE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_NOTICE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_NOTICE_descriptor_;
}

const GC_NOTICE& GC_NOTICE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_NOTICE* GC_NOTICE::default_instance_ = NULL;

GC_NOTICE* GC_NOTICE::New() const {
  return new GC_NOTICE;
}

void GC_NOTICE::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_notice()) {
      if (notice_ != &::google::protobuf::internal::kEmptyString) {
        notice_->clear();
      }
    }
    filterrepeat_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_NOTICE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string notice = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->notice().data(), this->notice().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_filterRepeat;
        break;
      }

      // optional int32 filterRepeat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filterRepeat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &filterrepeat_)));
          set_has_filterrepeat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_NOTICE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string notice = 1;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->notice(), output);
  }

  // optional int32 filterRepeat = 2;
  if (has_filterrepeat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->filterrepeat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_NOTICE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string notice = 1;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->notice(), target);
  }

  // optional int32 filterRepeat = 2;
  if (has_filterrepeat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->filterrepeat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_NOTICE::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string notice = 1;
    if (has_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notice());
    }

    // optional int32 filterRepeat = 2;
    if (has_filterrepeat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->filterrepeat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_NOTICE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_NOTICE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_NOTICE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_NOTICE::MergeFrom(const GC_NOTICE& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_notice()) {
      set_notice(from.notice());
    }
    if (from.has_filterrepeat()) {
      set_filterrepeat(from.filterrepeat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_NOTICE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_NOTICE::CopyFrom(const GC_NOTICE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_NOTICE::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GC_NOTICE::Swap(GC_NOTICE* other) {
  if (other != this) {
    std::swap(notice_, other->notice_);
    std::swap(filterrepeat_, other->filterrepeat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_NOTICE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_NOTICE_descriptor_;
  metadata.reflection = GC_NOTICE_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_MISSION_SYNC_MISSIONLIST::kMissionIDFieldNumber;
const int GC_MISSION_SYNC_MISSIONLIST::kStateFieldNumber;
const int GC_MISSION_SYNC_MISSIONLIST::kNParamFieldNumber;
const int GC_MISSION_SYNC_MISSIONLIST::kHavedoneFlagFieldNumber;
const int GC_MISSION_SYNC_MISSIONLIST::kQualitytypeFieldNumber;
#endif  // !_MSC_VER

GC_MISSION_SYNC_MISSIONLIST::GC_MISSION_SYNC_MISSIONLIST()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_MISSION_SYNC_MISSIONLIST::InitAsDefaultInstance() {
}

GC_MISSION_SYNC_MISSIONLIST::GC_MISSION_SYNC_MISSIONLIST(const GC_MISSION_SYNC_MISSIONLIST& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_MISSION_SYNC_MISSIONLIST::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_MISSION_SYNC_MISSIONLIST::~GC_MISSION_SYNC_MISSIONLIST() {
  SharedDtor();
}

void GC_MISSION_SYNC_MISSIONLIST::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_MISSION_SYNC_MISSIONLIST::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_MISSION_SYNC_MISSIONLIST::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_MISSION_SYNC_MISSIONLIST_descriptor_;
}

const GC_MISSION_SYNC_MISSIONLIST& GC_MISSION_SYNC_MISSIONLIST::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_MISSION_SYNC_MISSIONLIST* GC_MISSION_SYNC_MISSIONLIST::default_instance_ = NULL;

GC_MISSION_SYNC_MISSIONLIST* GC_MISSION_SYNC_MISSIONLIST::New() const {
  return new GC_MISSION_SYNC_MISSIONLIST;
}

void GC_MISSION_SYNC_MISSIONLIST::Clear() {
  missionid_.Clear();
  state_.Clear();
  nparam_.Clear();
  havedoneflag_.Clear();
  qualitytype_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_MISSION_SYNC_MISSIONLIST::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 missionID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_missionID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_missionid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_missionid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_missionID;
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // repeated int32 state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_state())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_state())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        if (input->ExpectTag(24)) goto parse_nParam;
        break;
      }

      // repeated int32 nParam = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nParam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_nparam())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_nparam())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nParam;
        if (input->ExpectTag(32)) goto parse_havedoneFlag;
        break;
      }

      // repeated uint32 havedoneFlag = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_havedoneFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_havedoneflag())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_havedoneflag())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_havedoneFlag;
        if (input->ExpectTag(40)) goto parse_qualitytype;
        break;
      }

      // repeated int32 qualitytype = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qualitytype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_qualitytype())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_qualitytype())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_qualitytype;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_MISSION_SYNC_MISSIONLIST::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 missionID = 1;
  for (int i = 0; i < this->missionid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->missionid(i), output);
  }

  // repeated int32 state = 2;
  for (int i = 0; i < this->state_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->state(i), output);
  }

  // repeated int32 nParam = 3;
  for (int i = 0; i < this->nparam_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->nparam(i), output);
  }

  // repeated uint32 havedoneFlag = 4;
  for (int i = 0; i < this->havedoneflag_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->havedoneflag(i), output);
  }

  // repeated int32 qualitytype = 5;
  for (int i = 0; i < this->qualitytype_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->qualitytype(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_MISSION_SYNC_MISSIONLIST::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 missionID = 1;
  for (int i = 0; i < this->missionid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->missionid(i), target);
  }

  // repeated int32 state = 2;
  for (int i = 0; i < this->state_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->state(i), target);
  }

  // repeated int32 nParam = 3;
  for (int i = 0; i < this->nparam_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->nparam(i), target);
  }

  // repeated uint32 havedoneFlag = 4;
  for (int i = 0; i < this->havedoneflag_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->havedoneflag(i), target);
  }

  // repeated int32 qualitytype = 5;
  for (int i = 0; i < this->qualitytype_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->qualitytype(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_MISSION_SYNC_MISSIONLIST::ByteSize() const {
  int total_size = 0;

  // repeated int32 missionID = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->missionid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->missionid(i));
    }
    total_size += 1 * this->missionid_size() + data_size;
  }

  // repeated int32 state = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->state_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->state(i));
    }
    total_size += 1 * this->state_size() + data_size;
  }

  // repeated int32 nParam = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->nparam_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->nparam(i));
    }
    total_size += 1 * this->nparam_size() + data_size;
  }

  // repeated uint32 havedoneFlag = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->havedoneflag_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->havedoneflag(i));
    }
    total_size += 1 * this->havedoneflag_size() + data_size;
  }

  // repeated int32 qualitytype = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->qualitytype_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->qualitytype(i));
    }
    total_size += 1 * this->qualitytype_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_MISSION_SYNC_MISSIONLIST::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_MISSION_SYNC_MISSIONLIST* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_MISSION_SYNC_MISSIONLIST*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_MISSION_SYNC_MISSIONLIST::MergeFrom(const GC_MISSION_SYNC_MISSIONLIST& from) {
  GOOGLE_CHECK_NE(&from, this);
  missionid_.MergeFrom(from.missionid_);
  state_.MergeFrom(from.state_);
  nparam_.MergeFrom(from.nparam_);
  havedoneflag_.MergeFrom(from.havedoneflag_);
  qualitytype_.MergeFrom(from.qualitytype_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_MISSION_SYNC_MISSIONLIST::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_MISSION_SYNC_MISSIONLIST::CopyFrom(const GC_MISSION_SYNC_MISSIONLIST& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_MISSION_SYNC_MISSIONLIST::IsInitialized() const {

  return true;
}

void GC_MISSION_SYNC_MISSIONLIST::Swap(GC_MISSION_SYNC_MISSIONLIST* other) {
  if (other != this) {
    missionid_.Swap(&other->missionid_);
    state_.Swap(&other->state_);
    nparam_.Swap(&other->nparam_);
    havedoneflag_.Swap(&other->havedoneflag_);
    qualitytype_.Swap(&other->qualitytype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_MISSION_SYNC_MISSIONLIST::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_MISSION_SYNC_MISSIONLIST_descriptor_;
  metadata.reflection = GC_MISSION_SYNC_MISSIONLIST_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CG_ACCEPTMISSION::kMissionIDFieldNumber;
#endif  // !_MSC_VER

CG_ACCEPTMISSION::CG_ACCEPTMISSION()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CG_ACCEPTMISSION::InitAsDefaultInstance() {
}

CG_ACCEPTMISSION::CG_ACCEPTMISSION(const CG_ACCEPTMISSION& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CG_ACCEPTMISSION::SharedCtor() {
  _cached_size_ = 0;
  missionid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CG_ACCEPTMISSION::~CG_ACCEPTMISSION() {
  SharedDtor();
}

void CG_ACCEPTMISSION::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CG_ACCEPTMISSION::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CG_ACCEPTMISSION::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CG_ACCEPTMISSION_descriptor_;
}

const CG_ACCEPTMISSION& CG_ACCEPTMISSION::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

CG_ACCEPTMISSION* CG_ACCEPTMISSION::default_instance_ = NULL;

CG_ACCEPTMISSION* CG_ACCEPTMISSION::New() const {
  return new CG_ACCEPTMISSION;
}

void CG_ACCEPTMISSION::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    missionid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CG_ACCEPTMISSION::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 MissionID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &missionid_)));
          set_has_missionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CG_ACCEPTMISSION::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 MissionID = 1;
  if (has_missionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->missionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CG_ACCEPTMISSION::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 MissionID = 1;
  if (has_missionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->missionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CG_ACCEPTMISSION::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 MissionID = 1;
    if (has_missionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->missionid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CG_ACCEPTMISSION::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CG_ACCEPTMISSION* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CG_ACCEPTMISSION*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CG_ACCEPTMISSION::MergeFrom(const CG_ACCEPTMISSION& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_missionid()) {
      set_missionid(from.missionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CG_ACCEPTMISSION::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CG_ACCEPTMISSION::CopyFrom(const CG_ACCEPTMISSION& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CG_ACCEPTMISSION::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CG_ACCEPTMISSION::Swap(CG_ACCEPTMISSION* other) {
  if (other != this) {
    std::swap(missionid_, other->missionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CG_ACCEPTMISSION::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CG_ACCEPTMISSION_descriptor_;
  metadata.reflection = CG_ACCEPTMISSION_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_ACCEPTMISSION_RET::kMissionIDFieldNumber;
const int GC_ACCEPTMISSION_RET::kQualityTypeFieldNumber;
const int GC_ACCEPTMISSION_RET::kRetFieldNumber;
#endif  // !_MSC_VER

GC_ACCEPTMISSION_RET::GC_ACCEPTMISSION_RET()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_ACCEPTMISSION_RET::InitAsDefaultInstance() {
}

GC_ACCEPTMISSION_RET::GC_ACCEPTMISSION_RET(const GC_ACCEPTMISSION_RET& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_ACCEPTMISSION_RET::SharedCtor() {
  _cached_size_ = 0;
  missionid_ = 0;
  qualitytype_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_ACCEPTMISSION_RET::~GC_ACCEPTMISSION_RET() {
  SharedDtor();
}

void GC_ACCEPTMISSION_RET::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_ACCEPTMISSION_RET::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_ACCEPTMISSION_RET::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_ACCEPTMISSION_RET_descriptor_;
}

const GC_ACCEPTMISSION_RET& GC_ACCEPTMISSION_RET::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_ACCEPTMISSION_RET* GC_ACCEPTMISSION_RET::default_instance_ = NULL;

GC_ACCEPTMISSION_RET* GC_ACCEPTMISSION_RET::New() const {
  return new GC_ACCEPTMISSION_RET;
}

void GC_ACCEPTMISSION_RET::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    missionid_ = 0;
    qualitytype_ = 0;
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_ACCEPTMISSION_RET::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 MissionID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &missionid_)));
          set_has_missionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_QualityType;
        break;
      }

      // required int32 QualityType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_QualityType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qualitytype_)));
          set_has_qualitytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Ret;
        break;
      }

      // required int32 Ret = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_ACCEPTMISSION_RET::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 MissionID = 1;
  if (has_missionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->missionid(), output);
  }

  // required int32 QualityType = 2;
  if (has_qualitytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->qualitytype(), output);
  }

  // required int32 Ret = 3;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_ACCEPTMISSION_RET::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 MissionID = 1;
  if (has_missionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->missionid(), target);
  }

  // required int32 QualityType = 2;
  if (has_qualitytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->qualitytype(), target);
  }

  // required int32 Ret = 3;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_ACCEPTMISSION_RET::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 MissionID = 1;
    if (has_missionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->missionid());
    }

    // required int32 QualityType = 2;
    if (has_qualitytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qualitytype());
    }

    // required int32 Ret = 3;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_ACCEPTMISSION_RET::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_ACCEPTMISSION_RET* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_ACCEPTMISSION_RET*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_ACCEPTMISSION_RET::MergeFrom(const GC_ACCEPTMISSION_RET& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_missionid()) {
      set_missionid(from.missionid());
    }
    if (from.has_qualitytype()) {
      set_qualitytype(from.qualitytype());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_ACCEPTMISSION_RET::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_ACCEPTMISSION_RET::CopyFrom(const GC_ACCEPTMISSION_RET& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_ACCEPTMISSION_RET::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GC_ACCEPTMISSION_RET::Swap(GC_ACCEPTMISSION_RET* other) {
  if (other != this) {
    std::swap(missionid_, other->missionid_);
    std::swap(qualitytype_, other->qualitytype_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_ACCEPTMISSION_RET::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_ACCEPTMISSION_RET_descriptor_;
  metadata.reflection = GC_ACCEPTMISSION_RET_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CG_COMPLETEMISSION::kMissionIDFieldNumber;
#endif  // !_MSC_VER

CG_COMPLETEMISSION::CG_COMPLETEMISSION()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CG_COMPLETEMISSION::InitAsDefaultInstance() {
}

CG_COMPLETEMISSION::CG_COMPLETEMISSION(const CG_COMPLETEMISSION& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CG_COMPLETEMISSION::SharedCtor() {
  _cached_size_ = 0;
  missionid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CG_COMPLETEMISSION::~CG_COMPLETEMISSION() {
  SharedDtor();
}

void CG_COMPLETEMISSION::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CG_COMPLETEMISSION::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CG_COMPLETEMISSION::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CG_COMPLETEMISSION_descriptor_;
}

const CG_COMPLETEMISSION& CG_COMPLETEMISSION::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

CG_COMPLETEMISSION* CG_COMPLETEMISSION::default_instance_ = NULL;

CG_COMPLETEMISSION* CG_COMPLETEMISSION::New() const {
  return new CG_COMPLETEMISSION;
}

void CG_COMPLETEMISSION::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    missionid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CG_COMPLETEMISSION::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 MissionID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &missionid_)));
          set_has_missionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CG_COMPLETEMISSION::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 MissionID = 1;
  if (has_missionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->missionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CG_COMPLETEMISSION::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 MissionID = 1;
  if (has_missionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->missionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CG_COMPLETEMISSION::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 MissionID = 1;
    if (has_missionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->missionid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CG_COMPLETEMISSION::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CG_COMPLETEMISSION* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CG_COMPLETEMISSION*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CG_COMPLETEMISSION::MergeFrom(const CG_COMPLETEMISSION& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_missionid()) {
      set_missionid(from.missionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CG_COMPLETEMISSION::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CG_COMPLETEMISSION::CopyFrom(const CG_COMPLETEMISSION& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CG_COMPLETEMISSION::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CG_COMPLETEMISSION::Swap(CG_COMPLETEMISSION* other) {
  if (other != this) {
    std::swap(missionid_, other->missionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CG_COMPLETEMISSION::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CG_COMPLETEMISSION_descriptor_;
  metadata.reflection = CG_COMPLETEMISSION_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_COMPLETEMISSION_RET::kMissionIDFieldNumber;
const int GC_COMPLETEMISSION_RET::kRetFieldNumber;
#endif  // !_MSC_VER

GC_COMPLETEMISSION_RET::GC_COMPLETEMISSION_RET()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_COMPLETEMISSION_RET::InitAsDefaultInstance() {
}

GC_COMPLETEMISSION_RET::GC_COMPLETEMISSION_RET(const GC_COMPLETEMISSION_RET& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_COMPLETEMISSION_RET::SharedCtor() {
  _cached_size_ = 0;
  missionid_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_COMPLETEMISSION_RET::~GC_COMPLETEMISSION_RET() {
  SharedDtor();
}

void GC_COMPLETEMISSION_RET::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_COMPLETEMISSION_RET::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_COMPLETEMISSION_RET::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_COMPLETEMISSION_RET_descriptor_;
}

const GC_COMPLETEMISSION_RET& GC_COMPLETEMISSION_RET::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_COMPLETEMISSION_RET* GC_COMPLETEMISSION_RET::default_instance_ = NULL;

GC_COMPLETEMISSION_RET* GC_COMPLETEMISSION_RET::New() const {
  return new GC_COMPLETEMISSION_RET;
}

void GC_COMPLETEMISSION_RET::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    missionid_ = 0;
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_COMPLETEMISSION_RET::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 MissionID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &missionid_)));
          set_has_missionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Ret;
        break;
      }

      // required int32 Ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_COMPLETEMISSION_RET::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 MissionID = 1;
  if (has_missionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->missionid(), output);
  }

  // required int32 Ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_COMPLETEMISSION_RET::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 MissionID = 1;
  if (has_missionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->missionid(), target);
  }

  // required int32 Ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_COMPLETEMISSION_RET::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 MissionID = 1;
    if (has_missionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->missionid());
    }

    // required int32 Ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_COMPLETEMISSION_RET::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_COMPLETEMISSION_RET* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_COMPLETEMISSION_RET*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_COMPLETEMISSION_RET::MergeFrom(const GC_COMPLETEMISSION_RET& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_missionid()) {
      set_missionid(from.missionid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_COMPLETEMISSION_RET::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_COMPLETEMISSION_RET::CopyFrom(const GC_COMPLETEMISSION_RET& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_COMPLETEMISSION_RET::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GC_COMPLETEMISSION_RET::Swap(GC_COMPLETEMISSION_RET* other) {
  if (other != this) {
    std::swap(missionid_, other->missionid_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_COMPLETEMISSION_RET::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_COMPLETEMISSION_RET_descriptor_;
  metadata.reflection = GC_COMPLETEMISSION_RET_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CG_ABANDONMISSION::kMissionIDFieldNumber;
#endif  // !_MSC_VER

CG_ABANDONMISSION::CG_ABANDONMISSION()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CG_ABANDONMISSION::InitAsDefaultInstance() {
}

CG_ABANDONMISSION::CG_ABANDONMISSION(const CG_ABANDONMISSION& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CG_ABANDONMISSION::SharedCtor() {
  _cached_size_ = 0;
  missionid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CG_ABANDONMISSION::~CG_ABANDONMISSION() {
  SharedDtor();
}

void CG_ABANDONMISSION::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CG_ABANDONMISSION::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CG_ABANDONMISSION::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CG_ABANDONMISSION_descriptor_;
}

const CG_ABANDONMISSION& CG_ABANDONMISSION::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

CG_ABANDONMISSION* CG_ABANDONMISSION::default_instance_ = NULL;

CG_ABANDONMISSION* CG_ABANDONMISSION::New() const {
  return new CG_ABANDONMISSION;
}

void CG_ABANDONMISSION::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    missionid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CG_ABANDONMISSION::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 MissionID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &missionid_)));
          set_has_missionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CG_ABANDONMISSION::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 MissionID = 1;
  if (has_missionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->missionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CG_ABANDONMISSION::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 MissionID = 1;
  if (has_missionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->missionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CG_ABANDONMISSION::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 MissionID = 1;
    if (has_missionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->missionid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CG_ABANDONMISSION::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CG_ABANDONMISSION* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CG_ABANDONMISSION*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CG_ABANDONMISSION::MergeFrom(const CG_ABANDONMISSION& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_missionid()) {
      set_missionid(from.missionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CG_ABANDONMISSION::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CG_ABANDONMISSION::CopyFrom(const CG_ABANDONMISSION& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CG_ABANDONMISSION::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CG_ABANDONMISSION::Swap(CG_ABANDONMISSION* other) {
  if (other != this) {
    std::swap(missionid_, other->missionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CG_ABANDONMISSION::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CG_ABANDONMISSION_descriptor_;
  metadata.reflection = CG_ABANDONMISSION_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_ABANDONMISSION_RET::kMissionIDFieldNumber;
const int GC_ABANDONMISSION_RET::kRetFieldNumber;
#endif  // !_MSC_VER

GC_ABANDONMISSION_RET::GC_ABANDONMISSION_RET()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_ABANDONMISSION_RET::InitAsDefaultInstance() {
}

GC_ABANDONMISSION_RET::GC_ABANDONMISSION_RET(const GC_ABANDONMISSION_RET& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_ABANDONMISSION_RET::SharedCtor() {
  _cached_size_ = 0;
  missionid_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_ABANDONMISSION_RET::~GC_ABANDONMISSION_RET() {
  SharedDtor();
}

void GC_ABANDONMISSION_RET::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_ABANDONMISSION_RET::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_ABANDONMISSION_RET::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_ABANDONMISSION_RET_descriptor_;
}

const GC_ABANDONMISSION_RET& GC_ABANDONMISSION_RET::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_ABANDONMISSION_RET* GC_ABANDONMISSION_RET::default_instance_ = NULL;

GC_ABANDONMISSION_RET* GC_ABANDONMISSION_RET::New() const {
  return new GC_ABANDONMISSION_RET;
}

void GC_ABANDONMISSION_RET::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    missionid_ = 0;
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_ABANDONMISSION_RET::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 MissionID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &missionid_)));
          set_has_missionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Ret;
        break;
      }

      // required int32 Ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_ABANDONMISSION_RET::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 MissionID = 1;
  if (has_missionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->missionid(), output);
  }

  // required int32 Ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_ABANDONMISSION_RET::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 MissionID = 1;
  if (has_missionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->missionid(), target);
  }

  // required int32 Ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_ABANDONMISSION_RET::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 MissionID = 1;
    if (has_missionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->missionid());
    }

    // required int32 Ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_ABANDONMISSION_RET::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_ABANDONMISSION_RET* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_ABANDONMISSION_RET*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_ABANDONMISSION_RET::MergeFrom(const GC_ABANDONMISSION_RET& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_missionid()) {
      set_missionid(from.missionid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_ABANDONMISSION_RET::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_ABANDONMISSION_RET::CopyFrom(const GC_ABANDONMISSION_RET& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_ABANDONMISSION_RET::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GC_ABANDONMISSION_RET::Swap(GC_ABANDONMISSION_RET* other) {
  if (other != this) {
    std::swap(missionid_, other->missionid_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_ABANDONMISSION_RET::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_ABANDONMISSION_RET_descriptor_;
  metadata.reflection = GC_ABANDONMISSION_RET_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_MISSION_STATE::kMissionIDFieldNumber;
const int GC_MISSION_STATE::kStateFieldNumber;
#endif  // !_MSC_VER

GC_MISSION_STATE::GC_MISSION_STATE()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_MISSION_STATE::InitAsDefaultInstance() {
}

GC_MISSION_STATE::GC_MISSION_STATE(const GC_MISSION_STATE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_MISSION_STATE::SharedCtor() {
  _cached_size_ = 0;
  missionid_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_MISSION_STATE::~GC_MISSION_STATE() {
  SharedDtor();
}

void GC_MISSION_STATE::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_MISSION_STATE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_MISSION_STATE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_MISSION_STATE_descriptor_;
}

const GC_MISSION_STATE& GC_MISSION_STATE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_MISSION_STATE* GC_MISSION_STATE::default_instance_ = NULL;

GC_MISSION_STATE* GC_MISSION_STATE::New() const {
  return new GC_MISSION_STATE;
}

void GC_MISSION_STATE::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    missionid_ = 0;
    state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_MISSION_STATE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 MissionID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &missionid_)));
          set_has_missionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_State;
        break;
      }

      // required int32 State = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_State:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_MISSION_STATE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 MissionID = 1;
  if (has_missionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->missionid(), output);
  }

  // required int32 State = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_MISSION_STATE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 MissionID = 1;
  if (has_missionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->missionid(), target);
  }

  // required int32 State = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_MISSION_STATE::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 MissionID = 1;
    if (has_missionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->missionid());
    }

    // required int32 State = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_MISSION_STATE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_MISSION_STATE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_MISSION_STATE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_MISSION_STATE::MergeFrom(const GC_MISSION_STATE& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_missionid()) {
      set_missionid(from.missionid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_MISSION_STATE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_MISSION_STATE::CopyFrom(const GC_MISSION_STATE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_MISSION_STATE::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GC_MISSION_STATE::Swap(GC_MISSION_STATE* other) {
  if (other != this) {
    std::swap(missionid_, other->missionid_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_MISSION_STATE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_MISSION_STATE_descriptor_;
  metadata.reflection = GC_MISSION_STATE_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_MISSION_PARAM::kMissionIDFieldNumber;
const int GC_MISSION_PARAM::kParamIndexFieldNumber;
const int GC_MISSION_PARAM::kParamFieldNumber;
#endif  // !_MSC_VER

GC_MISSION_PARAM::GC_MISSION_PARAM()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_MISSION_PARAM::InitAsDefaultInstance() {
}

GC_MISSION_PARAM::GC_MISSION_PARAM(const GC_MISSION_PARAM& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_MISSION_PARAM::SharedCtor() {
  _cached_size_ = 0;
  missionid_ = 0;
  paramindex_ = 0;
  param_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_MISSION_PARAM::~GC_MISSION_PARAM() {
  SharedDtor();
}

void GC_MISSION_PARAM::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_MISSION_PARAM::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_MISSION_PARAM::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_MISSION_PARAM_descriptor_;
}

const GC_MISSION_PARAM& GC_MISSION_PARAM::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_MISSION_PARAM* GC_MISSION_PARAM::default_instance_ = NULL;

GC_MISSION_PARAM* GC_MISSION_PARAM::New() const {
  return new GC_MISSION_PARAM;
}

void GC_MISSION_PARAM::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    missionid_ = 0;
    paramindex_ = 0;
    param_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_MISSION_PARAM::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 MissionID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &missionid_)));
          set_has_missionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ParamIndex;
        break;
      }

      // required int32 ParamIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ParamIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &paramindex_)));
          set_has_paramindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Param;
        break;
      }

      // required int32 Param = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param_)));
          set_has_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_MISSION_PARAM::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 MissionID = 1;
  if (has_missionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->missionid(), output);
  }

  // required int32 ParamIndex = 2;
  if (has_paramindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->paramindex(), output);
  }

  // required int32 Param = 3;
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_MISSION_PARAM::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 MissionID = 1;
  if (has_missionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->missionid(), target);
  }

  // required int32 ParamIndex = 2;
  if (has_paramindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->paramindex(), target);
  }

  // required int32 Param = 3;
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_MISSION_PARAM::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 MissionID = 1;
    if (has_missionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->missionid());
    }

    // required int32 ParamIndex = 2;
    if (has_paramindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->paramindex());
    }

    // required int32 Param = 3;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_MISSION_PARAM::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_MISSION_PARAM* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_MISSION_PARAM*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_MISSION_PARAM::MergeFrom(const GC_MISSION_PARAM& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_missionid()) {
      set_missionid(from.missionid());
    }
    if (from.has_paramindex()) {
      set_paramindex(from.paramindex());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_MISSION_PARAM::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_MISSION_PARAM::CopyFrom(const GC_MISSION_PARAM& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_MISSION_PARAM::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GC_MISSION_PARAM::Swap(GC_MISSION_PARAM* other) {
  if (other != this) {
    std::swap(missionid_, other->missionid_);
    std::swap(paramindex_, other->paramindex_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_MISSION_PARAM::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_MISSION_PARAM_descriptor_;
  metadata.reflection = GC_MISSION_PARAM_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_CREATE_PLAYER::kServerIdFieldNumber;
const int GC_CREATE_PLAYER::kGuidFieldNumber;
const int GC_CREATE_PLAYER::kSceneInstFieldNumber;
const int GC_CREATE_PLAYER::kSceneClassFieldNumber;
const int GC_CREATE_PLAYER::kDataIdFieldNumber;
const int GC_CREATE_PLAYER::kPosXFieldNumber;
const int GC_CREATE_PLAYER::kPosZFieldNumber;
const int GC_CREATE_PLAYER::kCurforceFieldNumber;
const int GC_CREATE_PLAYER::kNameFieldNumber;
const int GC_CREATE_PLAYER::kCurProfessionFieldNumber;
const int GC_CREATE_PLAYER::kFacedirFieldNumber;
const int GC_CREATE_PLAYER::kTitlenameFieldNumber;
const int GC_CREATE_PLAYER::kIsInPkListFieldNumber;
const int GC_CREATE_PLAYER::kIsDieFieldNumber;
const int GC_CREATE_PLAYER::kReliveTimeFieldNumber;
const int GC_CREATE_PLAYER::kPKModleFieldNumber;
const int GC_CREATE_PLAYER::kMountIDFieldNumber;
const int GC_CREATE_PLAYER::kMoveSpeedFieldNumber;
const int GC_CREATE_PLAYER::kModelVisualIDFieldNumber;
const int GC_CREATE_PLAYER::kWeaponDataIDFieldNumber;
const int GC_CREATE_PLAYER::kWeaponEffectGemFieldNumber;
const int GC_CREATE_PLAYER::kCurTitleIDFieldNumber;
const int GC_CREATE_PLAYER::kStealthLevFieldNumber;
const int GC_CREATE_PLAYER::kVipCostFieldNumber;
const int GC_CREATE_PLAYER::kGuildGuidFieldNumber;
const int GC_CREATE_PLAYER::kCombatValueFieldNumber;
const int GC_CREATE_PLAYER::kBindparentFieldNumber;
const int GC_CREATE_PLAYER::kBindchildrenFieldNumber;
const int GC_CREATE_PLAYER::kIsEnemy2SelfFieldNumber;
const int GC_CREATE_PLAYER::kPaoshangStateFieldNumber;
const int GC_CREATE_PLAYER::kLightSkillLevelFieldNumber;
#endif  // !_MSC_VER

GC_CREATE_PLAYER::GC_CREATE_PLAYER()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_CREATE_PLAYER::InitAsDefaultInstance() {
}

GC_CREATE_PLAYER::GC_CREATE_PLAYER(const GC_CREATE_PLAYER& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_CREATE_PLAYER::SharedCtor() {
  _cached_size_ = 0;
  serverid_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  sceneinst_ = 0;
  sceneclass_ = 0;
  dataid_ = 0;
  posx_ = 0;
  posz_ = 0;
  curforce_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  curprofession_ = 0;
  facedir_ = 0;
  titlename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isinpklist_ = 0;
  isdie_ = 0;
  relivetime_ = 0;
  pkmodle_ = 0;
  mountid_ = 0;
  movespeed_ = 0;
  modelvisualid_ = 0;
  weapondataid_ = 0;
  weaponeffectgem_ = 0;
  curtitleid_ = 0;
  stealthlev_ = 0;
  vipcost_ = 0;
  guildguid_ = GOOGLE_ULONGLONG(0);
  combatvalue_ = 0;
  bindparent_ = 0;
  isenemy2self_ = 0;
  paoshangstate_ = 0;
  lightskilllevel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_CREATE_PLAYER::~GC_CREATE_PLAYER() {
  SharedDtor();
}

void GC_CREATE_PLAYER::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (titlename_ != &::google::protobuf::internal::kEmptyString) {
    delete titlename_;
  }
  if (this != default_instance_) {
  }
}

void GC_CREATE_PLAYER::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_CREATE_PLAYER::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_CREATE_PLAYER_descriptor_;
}

const GC_CREATE_PLAYER& GC_CREATE_PLAYER::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_CREATE_PLAYER* GC_CREATE_PLAYER::default_instance_ = NULL;

GC_CREATE_PLAYER* GC_CREATE_PLAYER::New() const {
  return new GC_CREATE_PLAYER;
}

void GC_CREATE_PLAYER::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    serverid_ = 0;
    guid_ = GOOGLE_ULONGLONG(0);
    sceneinst_ = 0;
    sceneclass_ = 0;
    dataid_ = 0;
    posx_ = 0;
    posz_ = 0;
    curforce_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    curprofession_ = 0;
    facedir_ = 0;
    if (has_titlename()) {
      if (titlename_ != &::google::protobuf::internal::kEmptyString) {
        titlename_->clear();
      }
    }
    isinpklist_ = 0;
    isdie_ = 0;
    relivetime_ = 0;
    pkmodle_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    mountid_ = 0;
    movespeed_ = 0;
    modelvisualid_ = 0;
    weapondataid_ = 0;
    weaponeffectgem_ = 0;
    curtitleid_ = 0;
    stealthlev_ = 0;
    vipcost_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    guildguid_ = GOOGLE_ULONGLONG(0);
    combatvalue_ = 0;
    bindparent_ = 0;
    isenemy2self_ = 0;
    paoshangstate_ = 0;
    lightskilllevel_ = 0;
  }
  bindchildren_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_CREATE_PLAYER::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 serverId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }

      // required uint64 guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sceneInst;
        break;
      }

      // required int32 sceneInst = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneInst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneinst_)));
          set_has_sceneinst();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sceneClass;
        break;
      }

      // required int32 sceneClass = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneClass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneclass_)));
          set_has_sceneclass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_dataId;
        break;
      }

      // required int32 dataId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dataId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dataid_)));
          set_has_dataid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_posX;
        break;
      }

      // required int32 posX = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_posX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_posZ;
        break;
      }

      // required int32 posZ = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_posZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posz_)));
          set_has_posz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_curforce;
        break;
      }

      // required int32 curforce = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curforce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curforce_)));
          set_has_curforce();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_name;
        break;
      }

      // required string name = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_curProfession;
        break;
      }

      // required int32 curProfession = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curProfession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curprofession_)));
          set_has_curprofession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_facedir;
        break;
      }

      // required int32 facedir = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_facedir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &facedir_)));
          set_has_facedir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_titlename;
        break;
      }

      // required string titlename = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_titlename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_titlename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->titlename().data(), this->titlename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_isInPkList;
        break;
      }

      // required int32 isInPkList = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isInPkList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isinpklist_)));
          set_has_isinpklist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_isDie;
        break;
      }

      // required int32 isDie = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isDie:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isdie_)));
          set_has_isdie();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_ReliveTime;
        break;
      }

      // optional int32 ReliveTime = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ReliveTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &relivetime_)));
          set_has_relivetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_PKModle;
        break;
      }

      // required int32 PKModle = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PKModle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pkmodle_)));
          set_has_pkmodle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_MountID;
        break;
      }

      // required int32 MountID = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MountID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mountid_)));
          set_has_mountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_MoveSpeed;
        break;
      }

      // required int32 MoveSpeed = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MoveSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &movespeed_)));
          set_has_movespeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_ModelVisualID;
        break;
      }

      // required int32 ModelVisualID = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ModelVisualID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &modelvisualid_)));
          set_has_modelvisualid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_WeaponDataID;
        break;
      }

      // required int32 WeaponDataID = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WeaponDataID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weapondataid_)));
          set_has_weapondataid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_WeaponEffectGem;
        break;
      }

      // required int32 WeaponEffectGem = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WeaponEffectGem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weaponeffectgem_)));
          set_has_weaponeffectgem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_CurTitleID;
        break;
      }

      // required int32 CurTitleID = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CurTitleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curtitleid_)));
          set_has_curtitleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_StealthLev;
        break;
      }

      // required int32 StealthLev = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_StealthLev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stealthlev_)));
          set_has_stealthlev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_VipCost;
        break;
      }

      // required int32 VipCost = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VipCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vipcost_)));
          set_has_vipcost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_GuildGuid;
        break;
      }

      // required uint64 GuildGuid = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GuildGuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildguid_)));
          set_has_guildguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_CombatValue;
        break;
      }

      // required int32 CombatValue = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CombatValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &combatvalue_)));
          set_has_combatvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_bindparent;
        break;
      }

      // required int32 bindparent = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bindparent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bindparent_)));
          set_has_bindparent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_bindchildren;
        break;
      }

      // repeated int32 bindchildren = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bindchildren:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 232, input, this->mutable_bindchildren())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_bindchildren())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_bindchildren;
        if (input->ExpectTag(240)) goto parse_isEnemy2Self;
        break;
      }

      // required int32 isEnemy2Self = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isEnemy2Self:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isenemy2self_)));
          set_has_isenemy2self();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_paoshangState;
        break;
      }

      // optional int32 paoshangState = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_paoshangState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &paoshangstate_)));
          set_has_paoshangstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_lightSkillLevel;
        break;
      }

      // optional int32 lightSkillLevel = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lightSkillLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lightskilllevel_)));
          set_has_lightskilllevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_CREATE_PLAYER::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 serverId = 1;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->serverid(), output);
  }

  // required uint64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guid(), output);
  }

  // required int32 sceneInst = 3;
  if (has_sceneinst()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sceneinst(), output);
  }

  // required int32 sceneClass = 4;
  if (has_sceneclass()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sceneclass(), output);
  }

  // required int32 dataId = 5;
  if (has_dataid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->dataid(), output);
  }

  // required int32 posX = 6;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->posx(), output);
  }

  // required int32 posZ = 7;
  if (has_posz()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->posz(), output);
  }

  // required int32 curforce = 8;
  if (has_curforce()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->curforce(), output);
  }

  // required string name = 9;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->name(), output);
  }

  // required int32 curProfession = 10;
  if (has_curprofession()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->curprofession(), output);
  }

  // required int32 facedir = 11;
  if (has_facedir()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->facedir(), output);
  }

  // required string titlename = 12;
  if (has_titlename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->titlename().data(), this->titlename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->titlename(), output);
  }

  // required int32 isInPkList = 13;
  if (has_isinpklist()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->isinpklist(), output);
  }

  // required int32 isDie = 14;
  if (has_isdie()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->isdie(), output);
  }

  // optional int32 ReliveTime = 15;
  if (has_relivetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->relivetime(), output);
  }

  // required int32 PKModle = 16;
  if (has_pkmodle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->pkmodle(), output);
  }

  // required int32 MountID = 17;
  if (has_mountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->mountid(), output);
  }

  // required int32 MoveSpeed = 18;
  if (has_movespeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->movespeed(), output);
  }

  // required int32 ModelVisualID = 19;
  if (has_modelvisualid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->modelvisualid(), output);
  }

  // required int32 WeaponDataID = 20;
  if (has_weapondataid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->weapondataid(), output);
  }

  // required int32 WeaponEffectGem = 22;
  if (has_weaponeffectgem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->weaponeffectgem(), output);
  }

  // required int32 CurTitleID = 23;
  if (has_curtitleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->curtitleid(), output);
  }

  // required int32 StealthLev = 24;
  if (has_stealthlev()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->stealthlev(), output);
  }

  // required int32 VipCost = 25;
  if (has_vipcost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->vipcost(), output);
  }

  // required uint64 GuildGuid = 26;
  if (has_guildguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(26, this->guildguid(), output);
  }

  // required int32 CombatValue = 27;
  if (has_combatvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->combatvalue(), output);
  }

  // required int32 bindparent = 28;
  if (has_bindparent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->bindparent(), output);
  }

  // repeated int32 bindchildren = 29;
  for (int i = 0; i < this->bindchildren_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      29, this->bindchildren(i), output);
  }

  // required int32 isEnemy2Self = 30;
  if (has_isenemy2self()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->isenemy2self(), output);
  }

  // optional int32 paoshangState = 31;
  if (has_paoshangstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->paoshangstate(), output);
  }

  // optional int32 lightSkillLevel = 32;
  if (has_lightskilllevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->lightskilllevel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_CREATE_PLAYER::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 serverId = 1;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->serverid(), target);
  }

  // required uint64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guid(), target);
  }

  // required int32 sceneInst = 3;
  if (has_sceneinst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sceneinst(), target);
  }

  // required int32 sceneClass = 4;
  if (has_sceneclass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sceneclass(), target);
  }

  // required int32 dataId = 5;
  if (has_dataid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->dataid(), target);
  }

  // required int32 posX = 6;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->posx(), target);
  }

  // required int32 posZ = 7;
  if (has_posz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->posz(), target);
  }

  // required int32 curforce = 8;
  if (has_curforce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->curforce(), target);
  }

  // required string name = 9;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->name(), target);
  }

  // required int32 curProfession = 10;
  if (has_curprofession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->curprofession(), target);
  }

  // required int32 facedir = 11;
  if (has_facedir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->facedir(), target);
  }

  // required string titlename = 12;
  if (has_titlename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->titlename().data(), this->titlename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->titlename(), target);
  }

  // required int32 isInPkList = 13;
  if (has_isinpklist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->isinpklist(), target);
  }

  // required int32 isDie = 14;
  if (has_isdie()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->isdie(), target);
  }

  // optional int32 ReliveTime = 15;
  if (has_relivetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->relivetime(), target);
  }

  // required int32 PKModle = 16;
  if (has_pkmodle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->pkmodle(), target);
  }

  // required int32 MountID = 17;
  if (has_mountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->mountid(), target);
  }

  // required int32 MoveSpeed = 18;
  if (has_movespeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->movespeed(), target);
  }

  // required int32 ModelVisualID = 19;
  if (has_modelvisualid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->modelvisualid(), target);
  }

  // required int32 WeaponDataID = 20;
  if (has_weapondataid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->weapondataid(), target);
  }

  // required int32 WeaponEffectGem = 22;
  if (has_weaponeffectgem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->weaponeffectgem(), target);
  }

  // required int32 CurTitleID = 23;
  if (has_curtitleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->curtitleid(), target);
  }

  // required int32 StealthLev = 24;
  if (has_stealthlev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->stealthlev(), target);
  }

  // required int32 VipCost = 25;
  if (has_vipcost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->vipcost(), target);
  }

  // required uint64 GuildGuid = 26;
  if (has_guildguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(26, this->guildguid(), target);
  }

  // required int32 CombatValue = 27;
  if (has_combatvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->combatvalue(), target);
  }

  // required int32 bindparent = 28;
  if (has_bindparent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->bindparent(), target);
  }

  // repeated int32 bindchildren = 29;
  for (int i = 0; i < this->bindchildren_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(29, this->bindchildren(i), target);
  }

  // required int32 isEnemy2Self = 30;
  if (has_isenemy2self()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->isenemy2self(), target);
  }

  // optional int32 paoshangState = 31;
  if (has_paoshangstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->paoshangstate(), target);
  }

  // optional int32 lightSkillLevel = 32;
  if (has_lightskilllevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->lightskilllevel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_CREATE_PLAYER::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 serverId = 1;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverid());
    }

    // required uint64 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // required int32 sceneInst = 3;
    if (has_sceneinst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneinst());
    }

    // required int32 sceneClass = 4;
    if (has_sceneclass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneclass());
    }

    // required int32 dataId = 5;
    if (has_dataid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dataid());
    }

    // required int32 posX = 6;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posx());
    }

    // required int32 posZ = 7;
    if (has_posz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posz());
    }

    // required int32 curforce = 8;
    if (has_curforce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curforce());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string name = 9;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 curProfession = 10;
    if (has_curprofession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curprofession());
    }

    // required int32 facedir = 11;
    if (has_facedir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->facedir());
    }

    // required string titlename = 12;
    if (has_titlename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->titlename());
    }

    // required int32 isInPkList = 13;
    if (has_isinpklist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isinpklist());
    }

    // required int32 isDie = 14;
    if (has_isdie()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isdie());
    }

    // optional int32 ReliveTime = 15;
    if (has_relivetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->relivetime());
    }

    // required int32 PKModle = 16;
    if (has_pkmodle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pkmodle());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int32 MountID = 17;
    if (has_mountid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mountid());
    }

    // required int32 MoveSpeed = 18;
    if (has_movespeed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->movespeed());
    }

    // required int32 ModelVisualID = 19;
    if (has_modelvisualid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->modelvisualid());
    }

    // required int32 WeaponDataID = 20;
    if (has_weapondataid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weapondataid());
    }

    // required int32 WeaponEffectGem = 22;
    if (has_weaponeffectgem()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weaponeffectgem());
    }

    // required int32 CurTitleID = 23;
    if (has_curtitleid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curtitleid());
    }

    // required int32 StealthLev = 24;
    if (has_stealthlev()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stealthlev());
    }

    // required int32 VipCost = 25;
    if (has_vipcost()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vipcost());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required uint64 GuildGuid = 26;
    if (has_guildguid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildguid());
    }

    // required int32 CombatValue = 27;
    if (has_combatvalue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->combatvalue());
    }

    // required int32 bindparent = 28;
    if (has_bindparent()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bindparent());
    }

    // required int32 isEnemy2Self = 30;
    if (has_isenemy2self()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isenemy2self());
    }

    // optional int32 paoshangState = 31;
    if (has_paoshangstate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->paoshangstate());
    }

    // optional int32 lightSkillLevel = 32;
    if (has_lightskilllevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lightskilllevel());
    }

  }
  // repeated int32 bindchildren = 29;
  {
    int data_size = 0;
    for (int i = 0; i < this->bindchildren_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->bindchildren(i));
    }
    total_size += 2 * this->bindchildren_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_CREATE_PLAYER::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_CREATE_PLAYER* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_CREATE_PLAYER*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_CREATE_PLAYER::MergeFrom(const GC_CREATE_PLAYER& from) {
  GOOGLE_CHECK_NE(&from, this);
  bindchildren_.MergeFrom(from.bindchildren_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_sceneinst()) {
      set_sceneinst(from.sceneinst());
    }
    if (from.has_sceneclass()) {
      set_sceneclass(from.sceneclass());
    }
    if (from.has_dataid()) {
      set_dataid(from.dataid());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posz()) {
      set_posz(from.posz());
    }
    if (from.has_curforce()) {
      set_curforce(from.curforce());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_curprofession()) {
      set_curprofession(from.curprofession());
    }
    if (from.has_facedir()) {
      set_facedir(from.facedir());
    }
    if (from.has_titlename()) {
      set_titlename(from.titlename());
    }
    if (from.has_isinpklist()) {
      set_isinpklist(from.isinpklist());
    }
    if (from.has_isdie()) {
      set_isdie(from.isdie());
    }
    if (from.has_relivetime()) {
      set_relivetime(from.relivetime());
    }
    if (from.has_pkmodle()) {
      set_pkmodle(from.pkmodle());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_mountid()) {
      set_mountid(from.mountid());
    }
    if (from.has_movespeed()) {
      set_movespeed(from.movespeed());
    }
    if (from.has_modelvisualid()) {
      set_modelvisualid(from.modelvisualid());
    }
    if (from.has_weapondataid()) {
      set_weapondataid(from.weapondataid());
    }
    if (from.has_weaponeffectgem()) {
      set_weaponeffectgem(from.weaponeffectgem());
    }
    if (from.has_curtitleid()) {
      set_curtitleid(from.curtitleid());
    }
    if (from.has_stealthlev()) {
      set_stealthlev(from.stealthlev());
    }
    if (from.has_vipcost()) {
      set_vipcost(from.vipcost());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_guildguid()) {
      set_guildguid(from.guildguid());
    }
    if (from.has_combatvalue()) {
      set_combatvalue(from.combatvalue());
    }
    if (from.has_bindparent()) {
      set_bindparent(from.bindparent());
    }
    if (from.has_isenemy2self()) {
      set_isenemy2self(from.isenemy2self());
    }
    if (from.has_paoshangstate()) {
      set_paoshangstate(from.paoshangstate());
    }
    if (from.has_lightskilllevel()) {
      set_lightskilllevel(from.lightskilllevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_CREATE_PLAYER::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_CREATE_PLAYER::CopyFrom(const GC_CREATE_PLAYER& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_CREATE_PLAYER::IsInitialized() const {
  if ((_has_bits_[0] & 0x17ffbfff) != 0x17ffbfff) return false;

  return true;
}

void GC_CREATE_PLAYER::Swap(GC_CREATE_PLAYER* other) {
  if (other != this) {
    std::swap(serverid_, other->serverid_);
    std::swap(guid_, other->guid_);
    std::swap(sceneinst_, other->sceneinst_);
    std::swap(sceneclass_, other->sceneclass_);
    std::swap(dataid_, other->dataid_);
    std::swap(posx_, other->posx_);
    std::swap(posz_, other->posz_);
    std::swap(curforce_, other->curforce_);
    std::swap(name_, other->name_);
    std::swap(curprofession_, other->curprofession_);
    std::swap(facedir_, other->facedir_);
    std::swap(titlename_, other->titlename_);
    std::swap(isinpklist_, other->isinpklist_);
    std::swap(isdie_, other->isdie_);
    std::swap(relivetime_, other->relivetime_);
    std::swap(pkmodle_, other->pkmodle_);
    std::swap(mountid_, other->mountid_);
    std::swap(movespeed_, other->movespeed_);
    std::swap(modelvisualid_, other->modelvisualid_);
    std::swap(weapondataid_, other->weapondataid_);
    std::swap(weaponeffectgem_, other->weaponeffectgem_);
    std::swap(curtitleid_, other->curtitleid_);
    std::swap(stealthlev_, other->stealthlev_);
    std::swap(vipcost_, other->vipcost_);
    std::swap(guildguid_, other->guildguid_);
    std::swap(combatvalue_, other->combatvalue_);
    std::swap(bindparent_, other->bindparent_);
    bindchildren_.Swap(&other->bindchildren_);
    std::swap(isenemy2self_, other->isenemy2self_);
    std::swap(paoshangstate_, other->paoshangstate_);
    std::swap(lightskilllevel_, other->lightskilllevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_CREATE_PLAYER::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_CREATE_PLAYER_descriptor_;
  metadata.reflection = GC_CREATE_PLAYER_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_DELETE_OBJ::kServerIdFieldNumber;
#endif  // !_MSC_VER

GC_DELETE_OBJ::GC_DELETE_OBJ()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_DELETE_OBJ::InitAsDefaultInstance() {
}

GC_DELETE_OBJ::GC_DELETE_OBJ(const GC_DELETE_OBJ& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_DELETE_OBJ::SharedCtor() {
  _cached_size_ = 0;
  serverid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_DELETE_OBJ::~GC_DELETE_OBJ() {
  SharedDtor();
}

void GC_DELETE_OBJ::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_DELETE_OBJ::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_DELETE_OBJ::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_DELETE_OBJ_descriptor_;
}

const GC_DELETE_OBJ& GC_DELETE_OBJ::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_DELETE_OBJ* GC_DELETE_OBJ::default_instance_ = NULL;

GC_DELETE_OBJ* GC_DELETE_OBJ::New() const {
  return new GC_DELETE_OBJ;
}

void GC_DELETE_OBJ::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    serverid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_DELETE_OBJ::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 serverId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_DELETE_OBJ::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 serverId = 1;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->serverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_DELETE_OBJ::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 serverId = 1;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->serverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_DELETE_OBJ::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 serverId = 1;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_DELETE_OBJ::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_DELETE_OBJ* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_DELETE_OBJ*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_DELETE_OBJ::MergeFrom(const GC_DELETE_OBJ& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_DELETE_OBJ::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_DELETE_OBJ::CopyFrom(const GC_DELETE_OBJ& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_DELETE_OBJ::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GC_DELETE_OBJ::Swap(GC_DELETE_OBJ* other) {
  if (other != this) {
    std::swap(serverid_, other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_DELETE_OBJ::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_DELETE_OBJ_descriptor_;
  metadata.reflection = GC_DELETE_OBJ_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CG_SYNC_POS::kPosXFieldNumber;
const int CG_SYNC_POS::kPosZFieldNumber;
const int CG_SYNC_POS::kIsmoviongFieldNumber;
#endif  // !_MSC_VER

CG_SYNC_POS::CG_SYNC_POS()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CG_SYNC_POS::InitAsDefaultInstance() {
}

CG_SYNC_POS::CG_SYNC_POS(const CG_SYNC_POS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CG_SYNC_POS::SharedCtor() {
  _cached_size_ = 0;
  posx_ = 0;
  posz_ = 0;
  ismoviong_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CG_SYNC_POS::~CG_SYNC_POS() {
  SharedDtor();
}

void CG_SYNC_POS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CG_SYNC_POS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CG_SYNC_POS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CG_SYNC_POS_descriptor_;
}

const CG_SYNC_POS& CG_SYNC_POS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

CG_SYNC_POS* CG_SYNC_POS::default_instance_ = NULL;

CG_SYNC_POS* CG_SYNC_POS::New() const {
  return new CG_SYNC_POS;
}

void CG_SYNC_POS::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    posx_ = 0;
    posz_ = 0;
    ismoviong_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CG_SYNC_POS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 posX = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_posZ;
        break;
      }

      // required int32 posZ = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_posZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posz_)));
          set_has_posz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ismoviong;
        break;
      }

      // required int32 ismoviong = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ismoviong:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ismoviong_)));
          set_has_ismoviong();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CG_SYNC_POS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 posX = 1;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->posx(), output);
  }

  // required int32 posZ = 2;
  if (has_posz()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->posz(), output);
  }

  // required int32 ismoviong = 3;
  if (has_ismoviong()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ismoviong(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CG_SYNC_POS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 posX = 1;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->posx(), target);
  }

  // required int32 posZ = 2;
  if (has_posz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->posz(), target);
  }

  // required int32 ismoviong = 3;
  if (has_ismoviong()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ismoviong(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CG_SYNC_POS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 posX = 1;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posx());
    }

    // required int32 posZ = 2;
    if (has_posz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posz());
    }

    // required int32 ismoviong = 3;
    if (has_ismoviong()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ismoviong());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CG_SYNC_POS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CG_SYNC_POS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CG_SYNC_POS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CG_SYNC_POS::MergeFrom(const CG_SYNC_POS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posz()) {
      set_posz(from.posz());
    }
    if (from.has_ismoviong()) {
      set_ismoviong(from.ismoviong());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CG_SYNC_POS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CG_SYNC_POS::CopyFrom(const CG_SYNC_POS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CG_SYNC_POS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CG_SYNC_POS::Swap(CG_SYNC_POS* other) {
  if (other != this) {
    std::swap(posx_, other->posx_);
    std::swap(posz_, other->posz_);
    std::swap(ismoviong_, other->ismoviong_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CG_SYNC_POS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CG_SYNC_POS_descriptor_;
  metadata.reflection = CG_SYNC_POS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_SYNC_POS::kServerIdFieldNumber;
const int GC_SYNC_POS::kPosXFieldNumber;
const int GC_SYNC_POS::kPosZFieldNumber;
#endif  // !_MSC_VER

GC_SYNC_POS::GC_SYNC_POS()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_SYNC_POS::InitAsDefaultInstance() {
}

GC_SYNC_POS::GC_SYNC_POS(const GC_SYNC_POS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_SYNC_POS::SharedCtor() {
  _cached_size_ = 0;
  serverid_ = 0;
  posx_ = 0;
  posz_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_SYNC_POS::~GC_SYNC_POS() {
  SharedDtor();
}

void GC_SYNC_POS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_SYNC_POS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_SYNC_POS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_SYNC_POS_descriptor_;
}

const GC_SYNC_POS& GC_SYNC_POS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_SYNC_POS* GC_SYNC_POS::default_instance_ = NULL;

GC_SYNC_POS* GC_SYNC_POS::New() const {
  return new GC_SYNC_POS;
}

void GC_SYNC_POS::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    serverid_ = 0;
    posx_ = 0;
    posz_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_SYNC_POS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 serverId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_posX;
        break;
      }

      // required int32 posX = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_posX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_posZ;
        break;
      }

      // required int32 posZ = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_posZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posz_)));
          set_has_posz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_SYNC_POS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 serverId = 1;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->serverid(), output);
  }

  // required int32 posX = 2;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->posx(), output);
  }

  // required int32 posZ = 3;
  if (has_posz()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->posz(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_SYNC_POS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 serverId = 1;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->serverid(), target);
  }

  // required int32 posX = 2;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->posx(), target);
  }

  // required int32 posZ = 3;
  if (has_posz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->posz(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_SYNC_POS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 serverId = 1;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverid());
    }

    // required int32 posX = 2;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posx());
    }

    // required int32 posZ = 3;
    if (has_posz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posz());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_SYNC_POS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_SYNC_POS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_SYNC_POS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_SYNC_POS::MergeFrom(const GC_SYNC_POS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posz()) {
      set_posz(from.posz());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_SYNC_POS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_SYNC_POS::CopyFrom(const GC_SYNC_POS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_SYNC_POS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GC_SYNC_POS::Swap(GC_SYNC_POS* other) {
  if (other != this) {
    std::swap(serverid_, other->serverid_);
    std::swap(posx_, other->posx_);
    std::swap(posz_, other->posz_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_SYNC_POS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_SYNC_POS_descriptor_;
  metadata.reflection = GC_SYNC_POS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CG_MOVE::kPoscountFieldNumber;
const int CG_MOVE::kPosxFieldNumber;
const int CG_MOVE::kPoszFieldNumber;
const int CG_MOVE::kIsmovingFieldNumber;
#endif  // !_MSC_VER

CG_MOVE::CG_MOVE()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CG_MOVE::InitAsDefaultInstance() {
}

CG_MOVE::CG_MOVE(const CG_MOVE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CG_MOVE::SharedCtor() {
  _cached_size_ = 0;
  poscount_ = 0;
  ismoving_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CG_MOVE::~CG_MOVE() {
  SharedDtor();
}

void CG_MOVE::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CG_MOVE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CG_MOVE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CG_MOVE_descriptor_;
}

const CG_MOVE& CG_MOVE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

CG_MOVE* CG_MOVE::default_instance_ = NULL;

CG_MOVE* CG_MOVE::New() const {
  return new CG_MOVE;
}

void CG_MOVE::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    poscount_ = 0;
    ismoving_ = 0;
  }
  posx_.Clear();
  posz_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CG_MOVE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 poscount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &poscount_)));
          set_has_poscount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_posx;
        break;
      }

      // repeated int32 posx = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_posx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_posx())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_posx())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_posx;
        if (input->ExpectTag(24)) goto parse_posz;
        break;
      }

      // repeated int32 posz = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_posz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_posz())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_posz())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_posz;
        if (input->ExpectTag(32)) goto parse_ismoving;
        break;
      }

      // required int32 ismoving = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ismoving:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ismoving_)));
          set_has_ismoving();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CG_MOVE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 poscount = 1;
  if (has_poscount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->poscount(), output);
  }

  // repeated int32 posx = 2;
  for (int i = 0; i < this->posx_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->posx(i), output);
  }

  // repeated int32 posz = 3;
  for (int i = 0; i < this->posz_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->posz(i), output);
  }

  // required int32 ismoving = 4;
  if (has_ismoving()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ismoving(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CG_MOVE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 poscount = 1;
  if (has_poscount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->poscount(), target);
  }

  // repeated int32 posx = 2;
  for (int i = 0; i < this->posx_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->posx(i), target);
  }

  // repeated int32 posz = 3;
  for (int i = 0; i < this->posz_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->posz(i), target);
  }

  // required int32 ismoving = 4;
  if (has_ismoving()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ismoving(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CG_MOVE::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 poscount = 1;
    if (has_poscount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->poscount());
    }

    // required int32 ismoving = 4;
    if (has_ismoving()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ismoving());
    }

  }
  // repeated int32 posx = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->posx_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->posx(i));
    }
    total_size += 1 * this->posx_size() + data_size;
  }

  // repeated int32 posz = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->posz_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->posz(i));
    }
    total_size += 1 * this->posz_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CG_MOVE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CG_MOVE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CG_MOVE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CG_MOVE::MergeFrom(const CG_MOVE& from) {
  GOOGLE_CHECK_NE(&from, this);
  posx_.MergeFrom(from.posx_);
  posz_.MergeFrom(from.posz_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_poscount()) {
      set_poscount(from.poscount());
    }
    if (from.has_ismoving()) {
      set_ismoving(from.ismoving());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CG_MOVE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CG_MOVE::CopyFrom(const CG_MOVE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CG_MOVE::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;

  return true;
}

void CG_MOVE::Swap(CG_MOVE* other) {
  if (other != this) {
    std::swap(poscount_, other->poscount_);
    posx_.Swap(&other->posx_);
    posz_.Swap(&other->posz_);
    std::swap(ismoving_, other->ismoving_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CG_MOVE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CG_MOVE_descriptor_;
  metadata.reflection = CG_MOVE_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_MOVE::kServeridFieldNumber;
const int GC_MOVE::kPoscountFieldNumber;
const int GC_MOVE::kPosserialFieldNumber;
const int GC_MOVE::kPosxFieldNumber;
const int GC_MOVE::kPoszFieldNumber;
#endif  // !_MSC_VER

GC_MOVE::GC_MOVE()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_MOVE::InitAsDefaultInstance() {
}

GC_MOVE::GC_MOVE(const GC_MOVE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_MOVE::SharedCtor() {
  _cached_size_ = 0;
  serverid_ = 0;
  poscount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_MOVE::~GC_MOVE() {
  SharedDtor();
}

void GC_MOVE::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_MOVE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_MOVE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_MOVE_descriptor_;
}

const GC_MOVE& GC_MOVE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_MOVE* GC_MOVE::default_instance_ = NULL;

GC_MOVE* GC_MOVE::New() const {
  return new GC_MOVE;
}

void GC_MOVE::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    serverid_ = 0;
    poscount_ = 0;
  }
  posserial_.Clear();
  posx_.Clear();
  posz_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_MOVE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 serverid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_poscount;
        break;
      }

      // required int32 poscount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_poscount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &poscount_)));
          set_has_poscount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_posserial;
        break;
      }

      // repeated int32 posserial = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_posserial:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_posserial())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_posserial())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_posserial;
        if (input->ExpectTag(32)) goto parse_posx;
        break;
      }

      // repeated int32 posx = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_posx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_posx())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_posx())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_posx;
        if (input->ExpectTag(40)) goto parse_posz;
        break;
      }

      // repeated int32 posz = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_posz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_posz())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_posz())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_posz;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_MOVE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 serverid = 1;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->serverid(), output);
  }

  // required int32 poscount = 2;
  if (has_poscount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->poscount(), output);
  }

  // repeated int32 posserial = 3;
  for (int i = 0; i < this->posserial_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->posserial(i), output);
  }

  // repeated int32 posx = 4;
  for (int i = 0; i < this->posx_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->posx(i), output);
  }

  // repeated int32 posz = 5;
  for (int i = 0; i < this->posz_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->posz(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_MOVE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 serverid = 1;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->serverid(), target);
  }

  // required int32 poscount = 2;
  if (has_poscount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->poscount(), target);
  }

  // repeated int32 posserial = 3;
  for (int i = 0; i < this->posserial_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->posserial(i), target);
  }

  // repeated int32 posx = 4;
  for (int i = 0; i < this->posx_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->posx(i), target);
  }

  // repeated int32 posz = 5;
  for (int i = 0; i < this->posz_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->posz(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_MOVE::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 serverid = 1;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverid());
    }

    // required int32 poscount = 2;
    if (has_poscount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->poscount());
    }

  }
  // repeated int32 posserial = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->posserial_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->posserial(i));
    }
    total_size += 1 * this->posserial_size() + data_size;
  }

  // repeated int32 posx = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->posx_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->posx(i));
    }
    total_size += 1 * this->posx_size() + data_size;
  }

  // repeated int32 posz = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->posz_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->posz(i));
    }
    total_size += 1 * this->posz_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_MOVE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_MOVE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_MOVE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_MOVE::MergeFrom(const GC_MOVE& from) {
  GOOGLE_CHECK_NE(&from, this);
  posserial_.MergeFrom(from.posserial_);
  posx_.MergeFrom(from.posx_);
  posz_.MergeFrom(from.posz_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_poscount()) {
      set_poscount(from.poscount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_MOVE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_MOVE::CopyFrom(const GC_MOVE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_MOVE::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GC_MOVE::Swap(GC_MOVE* other) {
  if (other != this) {
    std::swap(serverid_, other->serverid_);
    std::swap(poscount_, other->poscount_);
    posserial_.Swap(&other->posserial_);
    posx_.Swap(&other->posx_);
    posz_.Swap(&other->posz_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_MOVE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_MOVE_descriptor_;
  metadata.reflection = GC_MOVE_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_STOP::kServeridFieldNumber;
const int GC_STOP::kPosserialFieldNumber;
const int GC_STOP::kPosxFieldNumber;
const int GC_STOP::kPoszFieldNumber;
#endif  // !_MSC_VER

GC_STOP::GC_STOP()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_STOP::InitAsDefaultInstance() {
}

GC_STOP::GC_STOP(const GC_STOP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_STOP::SharedCtor() {
  _cached_size_ = 0;
  serverid_ = 0;
  posserial_ = 0;
  posx_ = 0;
  posz_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_STOP::~GC_STOP() {
  SharedDtor();
}

void GC_STOP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_STOP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_STOP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_STOP_descriptor_;
}

const GC_STOP& GC_STOP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_STOP* GC_STOP::default_instance_ = NULL;

GC_STOP* GC_STOP::New() const {
  return new GC_STOP;
}

void GC_STOP::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    serverid_ = 0;
    posserial_ = 0;
    posx_ = 0;
    posz_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_STOP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 serverid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_posserial;
        break;
      }

      // required int32 posserial = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_posserial:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posserial_)));
          set_has_posserial();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_posx;
        break;
      }

      // required int32 posx = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_posx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_posz;
        break;
      }

      // required int32 posz = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_posz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posz_)));
          set_has_posz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_STOP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 serverid = 1;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->serverid(), output);
  }

  // required int32 posserial = 2;
  if (has_posserial()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->posserial(), output);
  }

  // required int32 posx = 3;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->posx(), output);
  }

  // required int32 posz = 4;
  if (has_posz()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->posz(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_STOP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 serverid = 1;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->serverid(), target);
  }

  // required int32 posserial = 2;
  if (has_posserial()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->posserial(), target);
  }

  // required int32 posx = 3;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->posx(), target);
  }

  // required int32 posz = 4;
  if (has_posz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->posz(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_STOP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 serverid = 1;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverid());
    }

    // required int32 posserial = 2;
    if (has_posserial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posserial());
    }

    // required int32 posx = 3;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posx());
    }

    // required int32 posz = 4;
    if (has_posz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posz());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_STOP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_STOP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_STOP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_STOP::MergeFrom(const GC_STOP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_posserial()) {
      set_posserial(from.posserial());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posz()) {
      set_posz(from.posz());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_STOP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_STOP::CopyFrom(const GC_STOP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_STOP::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void GC_STOP::Swap(GC_STOP* other) {
  if (other != this) {
    std::swap(serverid_, other->serverid_);
    std::swap(posserial_, other->posserial_);
    std::swap(posx_, other->posx_);
    std::swap(posz_, other->posz_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_STOP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_STOP_descriptor_;
  metadata.reflection = GC_STOP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_BROADCAST_ATTR::kObjIdFieldNumber;
const int GC_BROADCAST_ATTR::kCurProfessionFieldNumber;
const int GC_BROADCAST_ATTR::kNameFieldNumber;
const int GC_BROADCAST_ATTR::kCurForceFieldNumber;
const int GC_BROADCAST_ATTR::kMoveSpeedFieldNumber;
const int GC_BROADCAST_ATTR::kBDieFieldNumber;
const int GC_BROADCAST_ATTR::kFaceDirFieldNumber;
const int GC_BROADCAST_ATTR::kModelVisualIDFieldNumber;
const int GC_BROADCAST_ATTR::kWeaponDataIDFieldNumber;
const int GC_BROADCAST_ATTR::kWeaponEffectGemFieldNumber;
const int GC_BROADCAST_ATTR::kStealthLevFieldNumber;
const int GC_BROADCAST_ATTR::kVipCostFieldNumber;
const int GC_BROADCAST_ATTR::kCombatValueFieldNumber;
const int GC_BROADCAST_ATTR::kBindparentFieldNumber;
const int GC_BROADCAST_ATTR::kBindchildrenFieldNumber;
#endif  // !_MSC_VER

GC_BROADCAST_ATTR::GC_BROADCAST_ATTR()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_BROADCAST_ATTR::InitAsDefaultInstance() {
}

GC_BROADCAST_ATTR::GC_BROADCAST_ATTR(const GC_BROADCAST_ATTR& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_BROADCAST_ATTR::SharedCtor() {
  _cached_size_ = 0;
  objid_ = 0;
  curprofession_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  curforce_ = 0;
  movespeed_ = 0;
  bdie_ = 0;
  facedir_ = 0;
  modelvisualid_ = 0;
  weapondataid_ = 0;
  weaponeffectgem_ = 0;
  stealthlev_ = 0;
  vipcost_ = 0;
  combatvalue_ = 0;
  bindparent_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_BROADCAST_ATTR::~GC_BROADCAST_ATTR() {
  SharedDtor();
}

void GC_BROADCAST_ATTR::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void GC_BROADCAST_ATTR::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_BROADCAST_ATTR::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_BROADCAST_ATTR_descriptor_;
}

const GC_BROADCAST_ATTR& GC_BROADCAST_ATTR::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_BROADCAST_ATTR* GC_BROADCAST_ATTR::default_instance_ = NULL;

GC_BROADCAST_ATTR* GC_BROADCAST_ATTR::New() const {
  return new GC_BROADCAST_ATTR;
}

void GC_BROADCAST_ATTR::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objid_ = 0;
    curprofession_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    curforce_ = 0;
    movespeed_ = 0;
    bdie_ = 0;
    facedir_ = 0;
    modelvisualid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    weapondataid_ = 0;
    weaponeffectgem_ = 0;
    stealthlev_ = 0;
    vipcost_ = 0;
    combatvalue_ = 0;
    bindparent_ = 0;
  }
  bindchildren_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_BROADCAST_ATTR::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ObjId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CurProfession;
        break;
      }

      // optional int32 CurProfession = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CurProfession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curprofession_)));
          set_has_curprofession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Name;
        break;
      }

      // optional string Name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_CurForce;
        break;
      }

      // optional int32 CurForce = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CurForce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curforce_)));
          set_has_curforce();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_MoveSpeed;
        break;
      }

      // optional int32 MoveSpeed = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MoveSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &movespeed_)));
          set_has_movespeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_bDie;
        break;
      }

      // optional int32 bDie = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bDie:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bdie_)));
          set_has_bdie();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_faceDir;
        break;
      }

      // optional int32 faceDir = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_faceDir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &facedir_)));
          set_has_facedir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_ModelVisualID;
        break;
      }

      // optional int32 ModelVisualID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ModelVisualID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &modelvisualid_)));
          set_has_modelvisualid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_WeaponDataID;
        break;
      }

      // optional int32 WeaponDataID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WeaponDataID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weapondataid_)));
          set_has_weapondataid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_WeaponEffectGem;
        break;
      }

      // optional int32 WeaponEffectGem = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WeaponEffectGem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weaponeffectgem_)));
          set_has_weaponeffectgem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_StealthLev;
        break;
      }

      // optional int32 StealthLev = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_StealthLev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stealthlev_)));
          set_has_stealthlev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_VipCost;
        break;
      }

      // optional int32 VipCost = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VipCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vipcost_)));
          set_has_vipcost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_CombatValue;
        break;
      }

      // optional int32 CombatValue = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CombatValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &combatvalue_)));
          set_has_combatvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_bindparent;
        break;
      }

      // optional int32 bindparent = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bindparent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bindparent_)));
          set_has_bindparent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_bindchildren;
        break;
      }

      // repeated int32 bindchildren = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bindchildren:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 128, input, this->mutable_bindchildren())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_bindchildren())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_bindchildren;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_BROADCAST_ATTR::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ObjId = 1;
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->objid(), output);
  }

  // optional int32 CurProfession = 2;
  if (has_curprofession()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->curprofession(), output);
  }

  // optional string Name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional int32 CurForce = 4;
  if (has_curforce()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->curforce(), output);
  }

  // optional int32 MoveSpeed = 5;
  if (has_movespeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->movespeed(), output);
  }

  // optional int32 bDie = 6;
  if (has_bdie()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->bdie(), output);
  }

  // optional int32 faceDir = 7;
  if (has_facedir()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->facedir(), output);
  }

  // optional int32 ModelVisualID = 8;
  if (has_modelvisualid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->modelvisualid(), output);
  }

  // optional int32 WeaponDataID = 9;
  if (has_weapondataid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->weapondataid(), output);
  }

  // optional int32 WeaponEffectGem = 11;
  if (has_weaponeffectgem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->weaponeffectgem(), output);
  }

  // optional int32 StealthLev = 12;
  if (has_stealthlev()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->stealthlev(), output);
  }

  // optional int32 VipCost = 13;
  if (has_vipcost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->vipcost(), output);
  }

  // optional int32 CombatValue = 14;
  if (has_combatvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->combatvalue(), output);
  }

  // optional int32 bindparent = 15;
  if (has_bindparent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->bindparent(), output);
  }

  // repeated int32 bindchildren = 16;
  for (int i = 0; i < this->bindchildren_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      16, this->bindchildren(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_BROADCAST_ATTR::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ObjId = 1;
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->objid(), target);
  }

  // optional int32 CurProfession = 2;
  if (has_curprofession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->curprofession(), target);
  }

  // optional string Name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional int32 CurForce = 4;
  if (has_curforce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->curforce(), target);
  }

  // optional int32 MoveSpeed = 5;
  if (has_movespeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->movespeed(), target);
  }

  // optional int32 bDie = 6;
  if (has_bdie()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->bdie(), target);
  }

  // optional int32 faceDir = 7;
  if (has_facedir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->facedir(), target);
  }

  // optional int32 ModelVisualID = 8;
  if (has_modelvisualid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->modelvisualid(), target);
  }

  // optional int32 WeaponDataID = 9;
  if (has_weapondataid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->weapondataid(), target);
  }

  // optional int32 WeaponEffectGem = 11;
  if (has_weaponeffectgem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->weaponeffectgem(), target);
  }

  // optional int32 StealthLev = 12;
  if (has_stealthlev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->stealthlev(), target);
  }

  // optional int32 VipCost = 13;
  if (has_vipcost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->vipcost(), target);
  }

  // optional int32 CombatValue = 14;
  if (has_combatvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->combatvalue(), target);
  }

  // optional int32 bindparent = 15;
  if (has_bindparent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->bindparent(), target);
  }

  // repeated int32 bindchildren = 16;
  for (int i = 0; i < this->bindchildren_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(16, this->bindchildren(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_BROADCAST_ATTR::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ObjId = 1;
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objid());
    }

    // optional int32 CurProfession = 2;
    if (has_curprofession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curprofession());
    }

    // optional string Name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 CurForce = 4;
    if (has_curforce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curforce());
    }

    // optional int32 MoveSpeed = 5;
    if (has_movespeed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->movespeed());
    }

    // optional int32 bDie = 6;
    if (has_bdie()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bdie());
    }

    // optional int32 faceDir = 7;
    if (has_facedir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->facedir());
    }

    // optional int32 ModelVisualID = 8;
    if (has_modelvisualid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->modelvisualid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 WeaponDataID = 9;
    if (has_weapondataid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weapondataid());
    }

    // optional int32 WeaponEffectGem = 11;
    if (has_weaponeffectgem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weaponeffectgem());
    }

    // optional int32 StealthLev = 12;
    if (has_stealthlev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stealthlev());
    }

    // optional int32 VipCost = 13;
    if (has_vipcost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vipcost());
    }

    // optional int32 CombatValue = 14;
    if (has_combatvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->combatvalue());
    }

    // optional int32 bindparent = 15;
    if (has_bindparent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bindparent());
    }

  }
  // repeated int32 bindchildren = 16;
  {
    int data_size = 0;
    for (int i = 0; i < this->bindchildren_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->bindchildren(i));
    }
    total_size += 2 * this->bindchildren_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_BROADCAST_ATTR::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_BROADCAST_ATTR* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_BROADCAST_ATTR*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_BROADCAST_ATTR::MergeFrom(const GC_BROADCAST_ATTR& from) {
  GOOGLE_CHECK_NE(&from, this);
  bindchildren_.MergeFrom(from.bindchildren_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objid()) {
      set_objid(from.objid());
    }
    if (from.has_curprofession()) {
      set_curprofession(from.curprofession());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_curforce()) {
      set_curforce(from.curforce());
    }
    if (from.has_movespeed()) {
      set_movespeed(from.movespeed());
    }
    if (from.has_bdie()) {
      set_bdie(from.bdie());
    }
    if (from.has_facedir()) {
      set_facedir(from.facedir());
    }
    if (from.has_modelvisualid()) {
      set_modelvisualid(from.modelvisualid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_weapondataid()) {
      set_weapondataid(from.weapondataid());
    }
    if (from.has_weaponeffectgem()) {
      set_weaponeffectgem(from.weaponeffectgem());
    }
    if (from.has_stealthlev()) {
      set_stealthlev(from.stealthlev());
    }
    if (from.has_vipcost()) {
      set_vipcost(from.vipcost());
    }
    if (from.has_combatvalue()) {
      set_combatvalue(from.combatvalue());
    }
    if (from.has_bindparent()) {
      set_bindparent(from.bindparent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_BROADCAST_ATTR::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_BROADCAST_ATTR::CopyFrom(const GC_BROADCAST_ATTR& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_BROADCAST_ATTR::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GC_BROADCAST_ATTR::Swap(GC_BROADCAST_ATTR* other) {
  if (other != this) {
    std::swap(objid_, other->objid_);
    std::swap(curprofession_, other->curprofession_);
    std::swap(name_, other->name_);
    std::swap(curforce_, other->curforce_);
    std::swap(movespeed_, other->movespeed_);
    std::swap(bdie_, other->bdie_);
    std::swap(facedir_, other->facedir_);
    std::swap(modelvisualid_, other->modelvisualid_);
    std::swap(weapondataid_, other->weapondataid_);
    std::swap(weaponeffectgem_, other->weaponeffectgem_);
    std::swap(stealthlev_, other->stealthlev_);
    std::swap(vipcost_, other->vipcost_);
    std::swap(combatvalue_, other->combatvalue_);
    std::swap(bindparent_, other->bindparent_);
    bindchildren_.Swap(&other->bindchildren_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_BROADCAST_ATTR::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_BROADCAST_ATTR_descriptor_;
  metadata.reflection = GC_BROADCAST_ATTR_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_SYN_ATTR::kObjIdFieldNumber;
const int GC_SYN_ATTR::kCurHpFieldNumber;
const int GC_SYN_ATTR::kCurMpFieldNumber;
const int GC_SYN_ATTR::kCurXpFieldNumber;
const int GC_SYN_ATTR::kMaxHPFieldNumber;
const int GC_SYN_ATTR::kMaxMPFieldNumber;
const int GC_SYN_ATTR::kMaxXPFieldNumber;
const int GC_SYN_ATTR::kCurLevFieldNumber;
const int GC_SYN_ATTR::kCurExpFieldNumber;
const int GC_SYN_ATTR::kCurMoneyFieldNumber;
const int GC_SYN_ATTR::kCurYuanBaoFieldNumber;
const int GC_SYN_ATTR::kCurBDYuanBaoFieldNumber;
const int GC_SYN_ATTR::kCurZhenQiFieldNumber;
const int GC_SYN_ATTR::kIsInCombatFieldNumber;
#endif  // !_MSC_VER

GC_SYN_ATTR::GC_SYN_ATTR()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_SYN_ATTR::InitAsDefaultInstance() {
}

GC_SYN_ATTR::GC_SYN_ATTR(const GC_SYN_ATTR& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_SYN_ATTR::SharedCtor() {
  _cached_size_ = 0;
  objid_ = 0;
  curhp_ = 0;
  curmp_ = 0;
  curxp_ = 0;
  maxhp_ = 0;
  maxmp_ = 0;
  maxxp_ = 0;
  curlev_ = 0;
  curexp_ = 0;
  curmoney_ = 0;
  curyuanbao_ = 0;
  curbdyuanbao_ = 0;
  curzhenqi_ = 0;
  isincombat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_SYN_ATTR::~GC_SYN_ATTR() {
  SharedDtor();
}

void GC_SYN_ATTR::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_SYN_ATTR::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_SYN_ATTR::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_SYN_ATTR_descriptor_;
}

const GC_SYN_ATTR& GC_SYN_ATTR::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_SYN_ATTR* GC_SYN_ATTR::default_instance_ = NULL;

GC_SYN_ATTR* GC_SYN_ATTR::New() const {
  return new GC_SYN_ATTR;
}

void GC_SYN_ATTR::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objid_ = 0;
    curhp_ = 0;
    curmp_ = 0;
    curxp_ = 0;
    maxhp_ = 0;
    maxmp_ = 0;
    maxxp_ = 0;
    curlev_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    curexp_ = 0;
    curmoney_ = 0;
    curyuanbao_ = 0;
    curbdyuanbao_ = 0;
    curzhenqi_ = 0;
    isincombat_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_SYN_ATTR::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ObjId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CurHp;
        break;
      }

      // optional int32 CurHp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CurHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curhp_)));
          set_has_curhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_CurMp;
        break;
      }

      // optional int32 CurMp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CurMp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curmp_)));
          set_has_curmp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_CurXp;
        break;
      }

      // optional int32 CurXp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CurXp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curxp_)));
          set_has_curxp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_MaxHP;
        break;
      }

      // optional int32 MaxHP = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MaxHP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxhp_)));
          set_has_maxhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_MaxMP;
        break;
      }

      // optional int32 MaxMP = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MaxMP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxmp_)));
          set_has_maxmp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_MaxXP;
        break;
      }

      // optional int32 MaxXP = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MaxXP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxxp_)));
          set_has_maxxp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_CurLev;
        break;
      }

      // optional int32 CurLev = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CurLev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curlev_)));
          set_has_curlev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_CurExp;
        break;
      }

      // optional int32 CurExp = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CurExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curexp_)));
          set_has_curexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_CurMoney;
        break;
      }

      // optional int32 CurMoney = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CurMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curmoney_)));
          set_has_curmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_CurYuanBao;
        break;
      }

      // optional int32 CurYuanBao = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CurYuanBao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curyuanbao_)));
          set_has_curyuanbao();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_CurBDYuanBao;
        break;
      }

      // optional int32 CurBDYuanBao = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CurBDYuanBao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curbdyuanbao_)));
          set_has_curbdyuanbao();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_CurZhenQi;
        break;
      }

      // optional int32 CurZhenQi = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CurZhenQi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curzhenqi_)));
          set_has_curzhenqi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_isInCombat;
        break;
      }

      // optional int32 isInCombat = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isInCombat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isincombat_)));
          set_has_isincombat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_SYN_ATTR::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ObjId = 1;
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->objid(), output);
  }

  // optional int32 CurHp = 2;
  if (has_curhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->curhp(), output);
  }

  // optional int32 CurMp = 3;
  if (has_curmp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->curmp(), output);
  }

  // optional int32 CurXp = 4;
  if (has_curxp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->curxp(), output);
  }

  // optional int32 MaxHP = 5;
  if (has_maxhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->maxhp(), output);
  }

  // optional int32 MaxMP = 6;
  if (has_maxmp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->maxmp(), output);
  }

  // optional int32 MaxXP = 7;
  if (has_maxxp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->maxxp(), output);
  }

  // optional int32 CurLev = 8;
  if (has_curlev()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->curlev(), output);
  }

  // optional int32 CurExp = 9;
  if (has_curexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->curexp(), output);
  }

  // optional int32 CurMoney = 10;
  if (has_curmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->curmoney(), output);
  }

  // optional int32 CurYuanBao = 11;
  if (has_curyuanbao()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->curyuanbao(), output);
  }

  // optional int32 CurBDYuanBao = 12;
  if (has_curbdyuanbao()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->curbdyuanbao(), output);
  }

  // optional int32 CurZhenQi = 13;
  if (has_curzhenqi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->curzhenqi(), output);
  }

  // optional int32 isInCombat = 14;
  if (has_isincombat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->isincombat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_SYN_ATTR::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ObjId = 1;
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->objid(), target);
  }

  // optional int32 CurHp = 2;
  if (has_curhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->curhp(), target);
  }

  // optional int32 CurMp = 3;
  if (has_curmp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->curmp(), target);
  }

  // optional int32 CurXp = 4;
  if (has_curxp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->curxp(), target);
  }

  // optional int32 MaxHP = 5;
  if (has_maxhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->maxhp(), target);
  }

  // optional int32 MaxMP = 6;
  if (has_maxmp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->maxmp(), target);
  }

  // optional int32 MaxXP = 7;
  if (has_maxxp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->maxxp(), target);
  }

  // optional int32 CurLev = 8;
  if (has_curlev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->curlev(), target);
  }

  // optional int32 CurExp = 9;
  if (has_curexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->curexp(), target);
  }

  // optional int32 CurMoney = 10;
  if (has_curmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->curmoney(), target);
  }

  // optional int32 CurYuanBao = 11;
  if (has_curyuanbao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->curyuanbao(), target);
  }

  // optional int32 CurBDYuanBao = 12;
  if (has_curbdyuanbao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->curbdyuanbao(), target);
  }

  // optional int32 CurZhenQi = 13;
  if (has_curzhenqi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->curzhenqi(), target);
  }

  // optional int32 isInCombat = 14;
  if (has_isincombat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->isincombat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_SYN_ATTR::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ObjId = 1;
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objid());
    }

    // optional int32 CurHp = 2;
    if (has_curhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curhp());
    }

    // optional int32 CurMp = 3;
    if (has_curmp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curmp());
    }

    // optional int32 CurXp = 4;
    if (has_curxp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curxp());
    }

    // optional int32 MaxHP = 5;
    if (has_maxhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxhp());
    }

    // optional int32 MaxMP = 6;
    if (has_maxmp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxmp());
    }

    // optional int32 MaxXP = 7;
    if (has_maxxp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxxp());
    }

    // optional int32 CurLev = 8;
    if (has_curlev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curlev());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 CurExp = 9;
    if (has_curexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curexp());
    }

    // optional int32 CurMoney = 10;
    if (has_curmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curmoney());
    }

    // optional int32 CurYuanBao = 11;
    if (has_curyuanbao()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curyuanbao());
    }

    // optional int32 CurBDYuanBao = 12;
    if (has_curbdyuanbao()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curbdyuanbao());
    }

    // optional int32 CurZhenQi = 13;
    if (has_curzhenqi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curzhenqi());
    }

    // optional int32 isInCombat = 14;
    if (has_isincombat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isincombat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_SYN_ATTR::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_SYN_ATTR* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_SYN_ATTR*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_SYN_ATTR::MergeFrom(const GC_SYN_ATTR& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objid()) {
      set_objid(from.objid());
    }
    if (from.has_curhp()) {
      set_curhp(from.curhp());
    }
    if (from.has_curmp()) {
      set_curmp(from.curmp());
    }
    if (from.has_curxp()) {
      set_curxp(from.curxp());
    }
    if (from.has_maxhp()) {
      set_maxhp(from.maxhp());
    }
    if (from.has_maxmp()) {
      set_maxmp(from.maxmp());
    }
    if (from.has_maxxp()) {
      set_maxxp(from.maxxp());
    }
    if (from.has_curlev()) {
      set_curlev(from.curlev());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_curexp()) {
      set_curexp(from.curexp());
    }
    if (from.has_curmoney()) {
      set_curmoney(from.curmoney());
    }
    if (from.has_curyuanbao()) {
      set_curyuanbao(from.curyuanbao());
    }
    if (from.has_curbdyuanbao()) {
      set_curbdyuanbao(from.curbdyuanbao());
    }
    if (from.has_curzhenqi()) {
      set_curzhenqi(from.curzhenqi());
    }
    if (from.has_isincombat()) {
      set_isincombat(from.isincombat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_SYN_ATTR::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_SYN_ATTR::CopyFrom(const GC_SYN_ATTR& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_SYN_ATTR::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GC_SYN_ATTR::Swap(GC_SYN_ATTR* other) {
  if (other != this) {
    std::swap(objid_, other->objid_);
    std::swap(curhp_, other->curhp_);
    std::swap(curmp_, other->curmp_);
    std::swap(curxp_, other->curxp_);
    std::swap(maxhp_, other->maxhp_);
    std::swap(maxmp_, other->maxmp_);
    std::swap(maxxp_, other->maxxp_);
    std::swap(curlev_, other->curlev_);
    std::swap(curexp_, other->curexp_);
    std::swap(curmoney_, other->curmoney_);
    std::swap(curyuanbao_, other->curyuanbao_);
    std::swap(curbdyuanbao_, other->curbdyuanbao_);
    std::swap(curzhenqi_, other->curzhenqi_);
    std::swap(isincombat_, other->isincombat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_SYN_ATTR::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_SYN_ATTR_descriptor_;
  metadata.reflection = GC_SYN_ATTR_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_SYNC_COMMONDATA::kNIndexFieldNumber;
const int GC_SYNC_COMMONDATA::kNValueFieldNumber;
#endif  // !_MSC_VER

GC_SYNC_COMMONDATA::GC_SYNC_COMMONDATA()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_SYNC_COMMONDATA::InitAsDefaultInstance() {
}

GC_SYNC_COMMONDATA::GC_SYNC_COMMONDATA(const GC_SYNC_COMMONDATA& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_SYNC_COMMONDATA::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_SYNC_COMMONDATA::~GC_SYNC_COMMONDATA() {
  SharedDtor();
}

void GC_SYNC_COMMONDATA::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_SYNC_COMMONDATA::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_SYNC_COMMONDATA::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_SYNC_COMMONDATA_descriptor_;
}

const GC_SYNC_COMMONDATA& GC_SYNC_COMMONDATA::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_SYNC_COMMONDATA* GC_SYNC_COMMONDATA::default_instance_ = NULL;

GC_SYNC_COMMONDATA* GC_SYNC_COMMONDATA::New() const {
  return new GC_SYNC_COMMONDATA;
}

void GC_SYNC_COMMONDATA::Clear() {
  nindex_.Clear();
  nvalue_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_SYNC_COMMONDATA::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 nIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_nindex())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_nindex())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_nIndex;
        if (input->ExpectTag(16)) goto parse_nValue;
        break;
      }

      // repeated int32 nValue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_nvalue())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_nvalue())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nValue;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_SYNC_COMMONDATA::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 nIndex = 1;
  for (int i = 0; i < this->nindex_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->nindex(i), output);
  }

  // repeated int32 nValue = 2;
  for (int i = 0; i < this->nvalue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->nvalue(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_SYNC_COMMONDATA::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 nIndex = 1;
  for (int i = 0; i < this->nindex_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->nindex(i), target);
  }

  // repeated int32 nValue = 2;
  for (int i = 0; i < this->nvalue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->nvalue(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_SYNC_COMMONDATA::ByteSize() const {
  int total_size = 0;

  // repeated int32 nIndex = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->nindex_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->nindex(i));
    }
    total_size += 1 * this->nindex_size() + data_size;
  }

  // repeated int32 nValue = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->nvalue_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->nvalue(i));
    }
    total_size += 1 * this->nvalue_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_SYNC_COMMONDATA::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_SYNC_COMMONDATA* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_SYNC_COMMONDATA*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_SYNC_COMMONDATA::MergeFrom(const GC_SYNC_COMMONDATA& from) {
  GOOGLE_CHECK_NE(&from, this);
  nindex_.MergeFrom(from.nindex_);
  nvalue_.MergeFrom(from.nvalue_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_SYNC_COMMONDATA::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_SYNC_COMMONDATA::CopyFrom(const GC_SYNC_COMMONDATA& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_SYNC_COMMONDATA::IsInitialized() const {

  return true;
}

void GC_SYNC_COMMONDATA::Swap(GC_SYNC_COMMONDATA* other) {
  if (other != this) {
    nindex_.Swap(&other->nindex_);
    nvalue_.Swap(&other->nvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_SYNC_COMMONDATA::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_SYNC_COMMONDATA_descriptor_;
  metadata.reflection = GC_SYNC_COMMONDATA_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_SYNC_COMMONFLAG::kNIndexFieldNumber;
const int GC_SYNC_COMMONFLAG::kNValueFieldNumber;
#endif  // !_MSC_VER

GC_SYNC_COMMONFLAG::GC_SYNC_COMMONFLAG()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_SYNC_COMMONFLAG::InitAsDefaultInstance() {
}

GC_SYNC_COMMONFLAG::GC_SYNC_COMMONFLAG(const GC_SYNC_COMMONFLAG& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_SYNC_COMMONFLAG::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_SYNC_COMMONFLAG::~GC_SYNC_COMMONFLAG() {
  SharedDtor();
}

void GC_SYNC_COMMONFLAG::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_SYNC_COMMONFLAG::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_SYNC_COMMONFLAG::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_SYNC_COMMONFLAG_descriptor_;
}

const GC_SYNC_COMMONFLAG& GC_SYNC_COMMONFLAG::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_SYNC_COMMONFLAG* GC_SYNC_COMMONFLAG::default_instance_ = NULL;

GC_SYNC_COMMONFLAG* GC_SYNC_COMMONFLAG::New() const {
  return new GC_SYNC_COMMONFLAG;
}

void GC_SYNC_COMMONFLAG::Clear() {
  nindex_.Clear();
  nvalue_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_SYNC_COMMONFLAG::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 nIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_nindex())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_nindex())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_nIndex;
        if (input->ExpectTag(16)) goto parse_nValue;
        break;
      }

      // repeated int32 nValue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_nvalue())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_nvalue())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nValue;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_SYNC_COMMONFLAG::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 nIndex = 1;
  for (int i = 0; i < this->nindex_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->nindex(i), output);
  }

  // repeated int32 nValue = 2;
  for (int i = 0; i < this->nvalue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->nvalue(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_SYNC_COMMONFLAG::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 nIndex = 1;
  for (int i = 0; i < this->nindex_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->nindex(i), target);
  }

  // repeated int32 nValue = 2;
  for (int i = 0; i < this->nvalue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->nvalue(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_SYNC_COMMONFLAG::ByteSize() const {
  int total_size = 0;

  // repeated int32 nIndex = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->nindex_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->nindex(i));
    }
    total_size += 1 * this->nindex_size() + data_size;
  }

  // repeated int32 nValue = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->nvalue_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->nvalue(i));
    }
    total_size += 1 * this->nvalue_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_SYNC_COMMONFLAG::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_SYNC_COMMONFLAG* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_SYNC_COMMONFLAG*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_SYNC_COMMONFLAG::MergeFrom(const GC_SYNC_COMMONFLAG& from) {
  GOOGLE_CHECK_NE(&from, this);
  nindex_.MergeFrom(from.nindex_);
  nvalue_.MergeFrom(from.nvalue_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_SYNC_COMMONFLAG::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_SYNC_COMMONFLAG::CopyFrom(const GC_SYNC_COMMONFLAG& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_SYNC_COMMONFLAG::IsInitialized() const {

  return true;
}

void GC_SYNC_COMMONFLAG::Swap(GC_SYNC_COMMONFLAG* other) {
  if (other != this) {
    nindex_.Swap(&other->nindex_);
    nvalue_.Swap(&other->nvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_SYNC_COMMONFLAG::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_SYNC_COMMONFLAG_descriptor_;
  metadata.reflection = GC_SYNC_COMMONFLAG_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CG_ASK_SETCOMMONFLAG::kNBitsFieldNumber;
const int CG_ASK_SETCOMMONFLAG::kNFlagFieldNumber;
#endif  // !_MSC_VER

CG_ASK_SETCOMMONFLAG::CG_ASK_SETCOMMONFLAG()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CG_ASK_SETCOMMONFLAG::InitAsDefaultInstance() {
}

CG_ASK_SETCOMMONFLAG::CG_ASK_SETCOMMONFLAG(const CG_ASK_SETCOMMONFLAG& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CG_ASK_SETCOMMONFLAG::SharedCtor() {
  _cached_size_ = 0;
  nbits_ = 0;
  nflag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CG_ASK_SETCOMMONFLAG::~CG_ASK_SETCOMMONFLAG() {
  SharedDtor();
}

void CG_ASK_SETCOMMONFLAG::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CG_ASK_SETCOMMONFLAG::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CG_ASK_SETCOMMONFLAG::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CG_ASK_SETCOMMONFLAG_descriptor_;
}

const CG_ASK_SETCOMMONFLAG& CG_ASK_SETCOMMONFLAG::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

CG_ASK_SETCOMMONFLAG* CG_ASK_SETCOMMONFLAG::default_instance_ = NULL;

CG_ASK_SETCOMMONFLAG* CG_ASK_SETCOMMONFLAG::New() const {
  return new CG_ASK_SETCOMMONFLAG;
}

void CG_ASK_SETCOMMONFLAG::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nbits_ = 0;
    nflag_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CG_ASK_SETCOMMONFLAG::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 nBits = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nbits_)));
          set_has_nbits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nFlag;
        break;
      }

      // required int32 nFlag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nflag_)));
          set_has_nflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CG_ASK_SETCOMMONFLAG::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 nBits = 1;
  if (has_nbits()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nbits(), output);
  }

  // required int32 nFlag = 2;
  if (has_nflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nflag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CG_ASK_SETCOMMONFLAG::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 nBits = 1;
  if (has_nbits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nbits(), target);
  }

  // required int32 nFlag = 2;
  if (has_nflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nflag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CG_ASK_SETCOMMONFLAG::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 nBits = 1;
    if (has_nbits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nbits());
    }

    // required int32 nFlag = 2;
    if (has_nflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nflag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CG_ASK_SETCOMMONFLAG::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CG_ASK_SETCOMMONFLAG* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CG_ASK_SETCOMMONFLAG*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CG_ASK_SETCOMMONFLAG::MergeFrom(const CG_ASK_SETCOMMONFLAG& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nbits()) {
      set_nbits(from.nbits());
    }
    if (from.has_nflag()) {
      set_nflag(from.nflag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CG_ASK_SETCOMMONFLAG::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CG_ASK_SETCOMMONFLAG::CopyFrom(const CG_ASK_SETCOMMONFLAG& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CG_ASK_SETCOMMONFLAG::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CG_ASK_SETCOMMONFLAG::Swap(CG_ASK_SETCOMMONFLAG* other) {
  if (other != this) {
    std::swap(nbits_, other->nbits_);
    std::swap(nflag_, other->nflag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CG_ASK_SETCOMMONFLAG::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CG_ASK_SETCOMMONFLAG_descriptor_;
  metadata.reflection = CG_ASK_SETCOMMONFLAG_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_ASK_COMMONFLAG_RET::kNBitsFieldNumber;
const int GC_ASK_COMMONFLAG_RET::kNFlagFieldNumber;
#endif  // !_MSC_VER

GC_ASK_COMMONFLAG_RET::GC_ASK_COMMONFLAG_RET()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_ASK_COMMONFLAG_RET::InitAsDefaultInstance() {
}

GC_ASK_COMMONFLAG_RET::GC_ASK_COMMONFLAG_RET(const GC_ASK_COMMONFLAG_RET& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_ASK_COMMONFLAG_RET::SharedCtor() {
  _cached_size_ = 0;
  nbits_ = 0;
  nflag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_ASK_COMMONFLAG_RET::~GC_ASK_COMMONFLAG_RET() {
  SharedDtor();
}

void GC_ASK_COMMONFLAG_RET::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_ASK_COMMONFLAG_RET::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_ASK_COMMONFLAG_RET::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_ASK_COMMONFLAG_RET_descriptor_;
}

const GC_ASK_COMMONFLAG_RET& GC_ASK_COMMONFLAG_RET::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMessage_2eproto();
  return *default_instance_;
}

GC_ASK_COMMONFLAG_RET* GC_ASK_COMMONFLAG_RET::default_instance_ = NULL;

GC_ASK_COMMONFLAG_RET* GC_ASK_COMMONFLAG_RET::New() const {
  return new GC_ASK_COMMONFLAG_RET;
}

void GC_ASK_COMMONFLAG_RET::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nbits_ = 0;
    nflag_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GC_ASK_COMMONFLAG_RET::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 nBits = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nbits_)));
          set_has_nbits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nFlag;
        break;
      }

      // required int32 nFlag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nflag_)));
          set_has_nflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GC_ASK_COMMONFLAG_RET::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 nBits = 1;
  if (has_nbits()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nbits(), output);
  }

  // required int32 nFlag = 2;
  if (has_nflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nflag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_ASK_COMMONFLAG_RET::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 nBits = 1;
  if (has_nbits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nbits(), target);
  }

  // required int32 nFlag = 2;
  if (has_nflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nflag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_ASK_COMMONFLAG_RET::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 nBits = 1;
    if (has_nbits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nbits());
    }

    // required int32 nFlag = 2;
    if (has_nflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nflag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_ASK_COMMONFLAG_RET::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_ASK_COMMONFLAG_RET* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_ASK_COMMONFLAG_RET*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GC_ASK_COMMONFLAG_RET::MergeFrom(const GC_ASK_COMMONFLAG_RET& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nbits()) {
      set_nbits(from.nbits());
    }
    if (from.has_nflag()) {
      set_nflag(from.nflag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GC_ASK_COMMONFLAG_RET::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC_ASK_COMMONFLAG_RET::CopyFrom(const GC_ASK_COMMONFLAG_RET& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC_ASK_COMMONFLAG_RET::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GC_ASK_COMMONFLAG_RET::Swap(GC_ASK_COMMONFLAG_RET* other) {
  if (other != this) {
    std::swap(nbits_, other->nbits_);
    std::swap(nflag_, other->nflag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GC_ASK_COMMONFLAG_RET::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_ASK_COMMONFLAG_RET_descriptor_;
  metadata.reflection = GC_ASK_COMMONFLAG_RET_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
